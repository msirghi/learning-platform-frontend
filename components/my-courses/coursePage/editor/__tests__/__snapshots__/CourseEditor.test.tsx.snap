// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CourseEditor component should match the snapshot 1`] = `
<i>
  <SnackbarProvider
    maxSnack={3}
  >
    <CourseEditor>
      <MuiPickersUtilsProvider
        utils={[Function]}
      >
        <div
          className="title"
        >
          courses:addLessonTitle
        </div>
        <div
          className="editorContainer"
        >
          <ConfirmationDialog
            message="courses:errorMessages.platformNotSelected"
            onCancel={[Function]}
            onSubmit={[Function]}
            open={false}
          >
            <div
              data-testid="confirmation-dialog"
            >
              <WithStyles(ForwardRef(Dialog))
                aria-describedby="alert-dialog-description"
                aria-labelledby="alert-dialog-title"
                onClose={[Function]}
                open={false}
              >
                <ForwardRef(Dialog)
                  aria-describedby="alert-dialog-description"
                  aria-labelledby="alert-dialog-title"
                  classes={
                    Object {
                      "container": "MuiDialog-container",
                      "paper": "MuiDialog-paper",
                      "paperFullScreen": "MuiDialog-paperFullScreen",
                      "paperFullWidth": "MuiDialog-paperFullWidth",
                      "paperScrollBody": "MuiDialog-paperScrollBody",
                      "paperScrollPaper": "MuiDialog-paperScrollPaper",
                      "paperWidthFalse": "MuiDialog-paperWidthFalse",
                      "paperWidthLg": "MuiDialog-paperWidthLg",
                      "paperWidthMd": "MuiDialog-paperWidthMd",
                      "paperWidthSm": "MuiDialog-paperWidthSm",
                      "paperWidthXl": "MuiDialog-paperWidthXl",
                      "paperWidthXs": "MuiDialog-paperWidthXs",
                      "root": "MuiDialog-root",
                      "scrollBody": "MuiDialog-scrollBody",
                      "scrollPaper": "MuiDialog-scrollPaper",
                    }
                  }
                  onClose={[Function]}
                  open={false}
                >
                  <ForwardRef(Modal)
                    BackdropComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "Naked": Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "propTypes": Object {
                            "children": [Function],
                            "className": [Function],
                            "classes": [Function],
                            "invisible": [Function],
                            "open": [Function],
                            "transitionDuration": [Function],
                          },
                          "render": [Function],
                        },
                        "options": Object {
                          "defaultTheme": Object {
                            "breakpoints": Object {
                              "between": [Function],
                              "down": [Function],
                              "keys": Array [
                                "xs",
                                "sm",
                                "md",
                                "lg",
                                "xl",
                              ],
                              "only": [Function],
                              "up": [Function],
                              "values": Object {
                                "lg": 1280,
                                "md": 960,
                                "sm": 600,
                                "xl": 1920,
                                "xs": 0,
                              },
                              "width": [Function],
                            },
                            "direction": "ltr",
                            "mixins": Object {
                              "gutters": [Function],
                              "toolbar": Object {
                                "@media (min-width:0px) and (orientation: landscape)": Object {
                                  "minHeight": 48,
                                },
                                "@media (min-width:600px)": Object {
                                  "minHeight": 64,
                                },
                                "minHeight": 56,
                              },
                            },
                            "overrides": Object {},
                            "palette": Object {
                              "action": Object {
                                "activatedOpacity": 0.12,
                                "active": "rgba(0, 0, 0, 0.54)",
                                "disabled": "rgba(0, 0, 0, 0.26)",
                                "disabledBackground": "rgba(0, 0, 0, 0.12)",
                                "disabledOpacity": 0.38,
                                "focus": "rgba(0, 0, 0, 0.12)",
                                "focusOpacity": 0.12,
                                "hover": "rgba(0, 0, 0, 0.04)",
                                "hoverOpacity": 0.04,
                                "selected": "rgba(0, 0, 0, 0.08)",
                                "selectedOpacity": 0.08,
                              },
                              "augmentColor": [Function],
                              "background": Object {
                                "default": "#fafafa",
                                "paper": "#fff",
                              },
                              "common": Object {
                                "black": "#000",
                                "white": "#fff",
                              },
                              "contrastThreshold": 3,
                              "divider": "rgba(0, 0, 0, 0.12)",
                              "error": Object {
                                "contrastText": "#fff",
                                "dark": "#d32f2f",
                                "light": "#e57373",
                                "main": "#f44336",
                              },
                              "getContrastText": [Function],
                              "grey": Object {
                                "100": "#f5f5f5",
                                "200": "#eeeeee",
                                "300": "#e0e0e0",
                                "400": "#bdbdbd",
                                "50": "#fafafa",
                                "500": "#9e9e9e",
                                "600": "#757575",
                                "700": "#616161",
                                "800": "#424242",
                                "900": "#212121",
                                "A100": "#d5d5d5",
                                "A200": "#aaaaaa",
                                "A400": "#303030",
                                "A700": "#616161",
                              },
                              "info": Object {
                                "contrastText": "#fff",
                                "dark": "#1976d2",
                                "light": "#64b5f6",
                                "main": "#2196f3",
                              },
                              "primary": Object {
                                "contrastText": "#fff",
                                "dark": "#303f9f",
                                "light": "#7986cb",
                                "main": "#3f51b5",
                              },
                              "secondary": Object {
                                "contrastText": "#fff",
                                "dark": "#c51162",
                                "light": "#ff4081",
                                "main": "#f50057",
                              },
                              "success": Object {
                                "contrastText": "rgba(0, 0, 0, 0.87)",
                                "dark": "#388e3c",
                                "light": "#81c784",
                                "main": "#4caf50",
                              },
                              "text": Object {
                                "disabled": "rgba(0, 0, 0, 0.38)",
                                "hint": "rgba(0, 0, 0, 0.38)",
                                "primary": "rgba(0, 0, 0, 0.87)",
                                "secondary": "rgba(0, 0, 0, 0.54)",
                              },
                              "tonalOffset": 0.2,
                              "type": "light",
                              "warning": Object {
                                "contrastText": "rgba(0, 0, 0, 0.87)",
                                "dark": "#f57c00",
                                "light": "#ffb74d",
                                "main": "#ff9800",
                              },
                            },
                            "props": Object {},
                            "shadows": Array [
                              "none",
                              "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
                              "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
                              "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
                              "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
                              "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
                              "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
                              "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
                              "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
                              "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
                              "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
                              "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
                              "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
                              "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
                              "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
                              "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
                              "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
                              "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
                              "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
                              "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
                              "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
                              "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
                              "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
                              "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
                              "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
                            ],
                            "shape": Object {
                              "borderRadius": 4,
                            },
                            "spacing": [Function],
                            "transitions": Object {
                              "create": [Function],
                              "duration": Object {
                                "complex": 375,
                                "enteringScreen": 225,
                                "leavingScreen": 195,
                                "short": 250,
                                "shorter": 200,
                                "shortest": 150,
                                "standard": 300,
                              },
                              "easing": Object {
                                "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                                "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                                "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                                "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
                              },
                              "getAutoHeightDuration": [Function],
                            },
                            "typography": Object {
                              "body1": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "1rem",
                                "fontWeight": 400,
                                "letterSpacing": "0.00938em",
                                "lineHeight": 1.5,
                              },
                              "body2": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "0.875rem",
                                "fontWeight": 400,
                                "letterSpacing": "0.01071em",
                                "lineHeight": 1.43,
                              },
                              "button": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "0.875rem",
                                "fontWeight": 500,
                                "letterSpacing": "0.02857em",
                                "lineHeight": 1.75,
                                "textTransform": "uppercase",
                              },
                              "caption": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "0.75rem",
                                "fontWeight": 400,
                                "letterSpacing": "0.03333em",
                                "lineHeight": 1.66,
                              },
                              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                              "fontSize": 14,
                              "fontWeightBold": 700,
                              "fontWeightLight": 300,
                              "fontWeightMedium": 500,
                              "fontWeightRegular": 400,
                              "h1": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "6rem",
                                "fontWeight": 300,
                                "letterSpacing": "-0.01562em",
                                "lineHeight": 1.167,
                              },
                              "h2": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "3.75rem",
                                "fontWeight": 300,
                                "letterSpacing": "-0.00833em",
                                "lineHeight": 1.2,
                              },
                              "h3": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "3rem",
                                "fontWeight": 400,
                                "letterSpacing": "0em",
                                "lineHeight": 1.167,
                              },
                              "h4": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "2.125rem",
                                "fontWeight": 400,
                                "letterSpacing": "0.00735em",
                                "lineHeight": 1.235,
                              },
                              "h5": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "1.5rem",
                                "fontWeight": 400,
                                "letterSpacing": "0em",
                                "lineHeight": 1.334,
                              },
                              "h6": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "1.25rem",
                                "fontWeight": 500,
                                "letterSpacing": "0.0075em",
                                "lineHeight": 1.6,
                              },
                              "htmlFontSize": 16,
                              "overline": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "0.75rem",
                                "fontWeight": 400,
                                "letterSpacing": "0.08333em",
                                "lineHeight": 2.66,
                                "textTransform": "uppercase",
                              },
                              "pxToRem": [Function],
                              "round": [Function],
                              "subtitle1": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "1rem",
                                "fontWeight": 400,
                                "letterSpacing": "0.00938em",
                                "lineHeight": 1.75,
                              },
                              "subtitle2": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "0.875rem",
                                "fontWeight": 500,
                                "letterSpacing": "0.00714em",
                                "lineHeight": 1.57,
                              },
                            },
                            "zIndex": Object {
                              "appBar": 1100,
                              "drawer": 1200,
                              "mobileStepper": 1000,
                              "modal": 1300,
                              "snackbar": 1400,
                              "speedDial": 1050,
                              "tooltip": 1500,
                            },
                          },
                          "name": "MuiBackdrop",
                        },
                        "propTypes": Object {
                          "classes": [Function],
                          "innerRef": [Function],
                        },
                        "render": [Function],
                        "useStyles": [Function],
                      }
                    }
                    BackdropProps={
                      Object {
                        "transitionDuration": Object {
                          "enter": 225,
                          "exit": 195,
                        },
                      }
                    }
                    className="MuiDialog-root"
                    closeAfterTransition={true}
                    disableBackdropClick={false}
                    disableEscapeKeyDown={false}
                    onClose={[Function]}
                    open={false}
                  />
                </ForwardRef(Dialog)>
              </WithStyles(ForwardRef(Dialog))>
            </div>
          </ConfirmationDialog>
          <CourseEditorForm
            onChange={[Function]}
            onSubmit={[Function]}
            values={
              Object {
                "description": "",
                "endDate": 2000-11-22T00:00:00.000Z,
                "endTime": 2000-11-22T00:00:00.000Z,
                "startDate": 2000-11-22T00:00:00.000Z,
                "startTime": 2000-11-22T00:00:00.000Z,
                "subject": "",
              }
            }
          >
            <div>
              <div
                className="sectionTitle"
              >
                courses:informationLabel
              </div>
              <div>
                <WithStyles(ForwardRef(TextField))
                  fullWidth={true}
                  helperText="courses:editor.subjectHelperText"
                  inputProps={
                    Object {
                      "data-testid": "subject-field",
                    }
                  }
                  label="courses:editor.subjectLabel"
                  name="subject"
                  onChange={[Function]}
                  required={true}
                  value=""
                  variant="outlined"
                >
                  <ForwardRef(TextField)
                    classes={
                      Object {
                        "root": "MuiTextField-root",
                      }
                    }
                    fullWidth={true}
                    helperText="courses:editor.subjectHelperText"
                    inputProps={
                      Object {
                        "data-testid": "subject-field",
                      }
                    }
                    label="courses:editor.subjectLabel"
                    name="subject"
                    onChange={[Function]}
                    required={true}
                    value=""
                    variant="outlined"
                  >
                    <WithStyles(ForwardRef(FormControl))
                      className="MuiTextField-root"
                      color="primary"
                      disabled={false}
                      error={false}
                      fullWidth={true}
                      required={true}
                      variant="outlined"
                    >
                      <ForwardRef(FormControl)
                        className="MuiTextField-root"
                        classes={
                          Object {
                            "fullWidth": "MuiFormControl-fullWidth",
                            "marginDense": "MuiFormControl-marginDense",
                            "marginNormal": "MuiFormControl-marginNormal",
                            "root": "MuiFormControl-root",
                          }
                        }
                        color="primary"
                        disabled={false}
                        error={false}
                        fullWidth={true}
                        required={true}
                        variant="outlined"
                      >
                        <div
                          className="MuiFormControl-root MuiTextField-root MuiFormControl-fullWidth"
                        >
                          <WithStyles(ForwardRef(InputLabel))>
                            <ForwardRef(InputLabel)
                              classes={
                                Object {
                                  "animated": "MuiInputLabel-animated",
                                  "asterisk": "MuiInputLabel-asterisk",
                                  "disabled": "Mui-disabled",
                                  "error": "Mui-error",
                                  "filled": "MuiInputLabel-filled",
                                  "focused": "Mui-focused",
                                  "formControl": "MuiInputLabel-formControl",
                                  "marginDense": "MuiInputLabel-marginDense",
                                  "outlined": "MuiInputLabel-outlined",
                                  "required": "Mui-required",
                                  "root": "MuiInputLabel-root",
                                  "shrink": "MuiInputLabel-shrink",
                                }
                              }
                            >
                              <WithStyles(ForwardRef(FormLabel))
                                className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-outlined"
                                classes={
                                  Object {
                                    "asterisk": "MuiInputLabel-asterisk",
                                    "disabled": "Mui-disabled",
                                    "error": "Mui-error",
                                    "focused": "Mui-focused",
                                    "required": "Mui-required",
                                  }
                                }
                                data-shrink={false}
                              >
                                <ForwardRef(FormLabel)
                                  className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-outlined"
                                  classes={
                                    Object {
                                      "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                                      "colorSecondary": "MuiFormLabel-colorSecondary",
                                      "disabled": "Mui-disabled Mui-disabled",
                                      "error": "Mui-error Mui-error",
                                      "filled": "MuiFormLabel-filled",
                                      "focused": "Mui-focused Mui-focused",
                                      "required": "Mui-required Mui-required",
                                      "root": "MuiFormLabel-root",
                                    }
                                  }
                                  data-shrink={false}
                                >
                                  <label
                                    className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-outlined Mui-required Mui-required"
                                    data-shrink={false}
                                  >
                                    courses:editor.subjectLabel
                                    <span
                                      aria-hidden={true}
                                      className="MuiFormLabel-asterisk MuiInputLabel-asterisk"
                                    >
                                       
                                      *
                                    </span>
                                  </label>
                                </ForwardRef(FormLabel)>
                              </WithStyles(ForwardRef(FormLabel))>
                            </ForwardRef(InputLabel)>
                          </WithStyles(ForwardRef(InputLabel))>
                          <WithStyles(ForwardRef(OutlinedInput))
                            autoFocus={false}
                            fullWidth={true}
                            inputProps={
                              Object {
                                "data-testid": "subject-field",
                              }
                            }
                            label={
                              <React.Fragment>
                                courses:editor.subjectLabel
                                 *
                              </React.Fragment>
                            }
                            multiline={false}
                            name="subject"
                            onChange={[Function]}
                            value=""
                          >
                            <ForwardRef(OutlinedInput)
                              autoFocus={false}
                              classes={
                                Object {
                                  "adornedEnd": "MuiOutlinedInput-adornedEnd",
                                  "adornedStart": "MuiOutlinedInput-adornedStart",
                                  "colorSecondary": "MuiOutlinedInput-colorSecondary",
                                  "disabled": "Mui-disabled",
                                  "error": "Mui-error",
                                  "focused": "Mui-focused",
                                  "input": "MuiOutlinedInput-input",
                                  "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                                  "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                                  "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                                  "inputMultiline": "MuiOutlinedInput-inputMultiline",
                                  "marginDense": "MuiOutlinedInput-marginDense",
                                  "multiline": "MuiOutlinedInput-multiline",
                                  "notchedOutline": "MuiOutlinedInput-notchedOutline",
                                  "root": "MuiOutlinedInput-root",
                                }
                              }
                              fullWidth={true}
                              inputProps={
                                Object {
                                  "data-testid": "subject-field",
                                }
                              }
                              label={
                                <React.Fragment>
                                  courses:editor.subjectLabel
                                   *
                                </React.Fragment>
                              }
                              multiline={false}
                              name="subject"
                              onChange={[Function]}
                              value=""
                            >
                              <WithStyles(ForwardRef(InputBase))
                                autoFocus={false}
                                classes={
                                  Object {
                                    "adornedEnd": "MuiOutlinedInput-adornedEnd",
                                    "adornedStart": "MuiOutlinedInput-adornedStart",
                                    "colorSecondary": "MuiOutlinedInput-colorSecondary",
                                    "disabled": "Mui-disabled",
                                    "error": "Mui-error",
                                    "focused": "Mui-focused",
                                    "input": "MuiOutlinedInput-input",
                                    "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                                    "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                                    "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                                    "inputMultiline": "MuiOutlinedInput-inputMultiline",
                                    "marginDense": "MuiOutlinedInput-marginDense",
                                    "multiline": "MuiOutlinedInput-multiline",
                                    "notchedOutline": null,
                                    "root": "MuiOutlinedInput-root",
                                  }
                                }
                                fullWidth={true}
                                inputComponent="input"
                                inputProps={
                                  Object {
                                    "data-testid": "subject-field",
                                  }
                                }
                                multiline={false}
                                name="subject"
                                onChange={[Function]}
                                renderSuffix={[Function]}
                                type="text"
                                value=""
                              >
                                <ForwardRef(InputBase)
                                  autoFocus={false}
                                  classes={
                                    Object {
                                      "adornedEnd": "MuiInputBase-adornedEnd MuiOutlinedInput-adornedEnd",
                                      "adornedStart": "MuiInputBase-adornedStart MuiOutlinedInput-adornedStart",
                                      "colorSecondary": "MuiInputBase-colorSecondary MuiOutlinedInput-colorSecondary",
                                      "disabled": "Mui-disabled Mui-disabled",
                                      "error": "Mui-error Mui-error",
                                      "focused": "Mui-focused Mui-focused",
                                      "formControl": "MuiInputBase-formControl",
                                      "fullWidth": "MuiInputBase-fullWidth",
                                      "input": "MuiInputBase-input MuiOutlinedInput-input",
                                      "inputAdornedEnd": "MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd",
                                      "inputAdornedStart": "MuiInputBase-inputAdornedStart MuiOutlinedInput-inputAdornedStart",
                                      "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                      "inputMarginDense": "MuiInputBase-inputMarginDense MuiOutlinedInput-inputMarginDense",
                                      "inputMultiline": "MuiInputBase-inputMultiline MuiOutlinedInput-inputMultiline",
                                      "inputTypeSearch": "MuiInputBase-inputTypeSearch",
                                      "marginDense": "MuiInputBase-marginDense MuiOutlinedInput-marginDense",
                                      "multiline": "MuiInputBase-multiline MuiOutlinedInput-multiline",
                                      "root": "MuiInputBase-root MuiOutlinedInput-root",
                                    }
                                  }
                                  fullWidth={true}
                                  inputComponent="input"
                                  inputProps={
                                    Object {
                                      "data-testid": "subject-field",
                                    }
                                  }
                                  multiline={false}
                                  name="subject"
                                  onChange={[Function]}
                                  renderSuffix={[Function]}
                                  type="text"
                                  value=""
                                >
                                  <div
                                    className="MuiInputBase-root MuiOutlinedInput-root MuiInputBase-fullWidth MuiInputBase-formControl"
                                    onClick={[Function]}
                                  >
                                    <input
                                      aria-invalid={false}
                                      autoFocus={false}
                                      className="MuiInputBase-input MuiOutlinedInput-input"
                                      data-testid="subject-field"
                                      disabled={false}
                                      name="subject"
                                      onAnimationStart={[Function]}
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      onFocus={[Function]}
                                      required={true}
                                      type="text"
                                      value=""
                                    />
                                    <WithStyles(ForwardRef(NotchedOutline))
                                      className="MuiOutlinedInput-notchedOutline"
                                      label={
                                        <React.Fragment>
                                          courses:editor.subjectLabel
                                           *
                                        </React.Fragment>
                                      }
                                      labelWidth={0}
                                      notched={false}
                                    >
                                      <ForwardRef(NotchedOutline)
                                        className="MuiOutlinedInput-notchedOutline"
                                        classes={
                                          Object {
                                            "legend": "PrivateNotchedOutline-legend-2",
                                            "legendLabelled": "PrivateNotchedOutline-legendLabelled-3",
                                            "legendNotched": "PrivateNotchedOutline-legendNotched-4",
                                            "root": "PrivateNotchedOutline-root-1",
                                          }
                                        }
                                        label={
                                          <React.Fragment>
                                            courses:editor.subjectLabel
                                             *
                                          </React.Fragment>
                                        }
                                        labelWidth={0}
                                        notched={false}
                                      >
                                        <fieldset
                                          aria-hidden={true}
                                          className="PrivateNotchedOutline-root-1 MuiOutlinedInput-notchedOutline"
                                        >
                                          <legend
                                            className="PrivateNotchedOutline-legendLabelled-3"
                                          >
                                            <span>
                                              courses:editor.subjectLabel
                                               *
                                            </span>
                                          </legend>
                                        </fieldset>
                                      </ForwardRef(NotchedOutline)>
                                    </WithStyles(ForwardRef(NotchedOutline))>
                                  </div>
                                </ForwardRef(InputBase)>
                              </WithStyles(ForwardRef(InputBase))>
                            </ForwardRef(OutlinedInput)>
                          </WithStyles(ForwardRef(OutlinedInput))>
                          <WithStyles(ForwardRef(FormHelperText))>
                            <ForwardRef(FormHelperText)
                              classes={
                                Object {
                                  "contained": "MuiFormHelperText-contained",
                                  "disabled": "Mui-disabled",
                                  "error": "Mui-error",
                                  "filled": "MuiFormHelperText-filled",
                                  "focused": "Mui-focused",
                                  "marginDense": "MuiFormHelperText-marginDense",
                                  "required": "Mui-required",
                                  "root": "MuiFormHelperText-root",
                                }
                              }
                            >
                              <p
                                className="MuiFormHelperText-root MuiFormHelperText-contained Mui-required"
                              >
                                courses:editor.subjectHelperText
                              </p>
                            </ForwardRef(FormHelperText)>
                          </WithStyles(ForwardRef(FormHelperText))>
                        </div>
                      </ForwardRef(FormControl)>
                    </WithStyles(ForwardRef(FormControl))>
                  </ForwardRef(TextField)>
                </WithStyles(ForwardRef(TextField))>
              </div>
              <div
                className="dateTimeRow"
              >
                <PickerWithState
                  allowKeyboardControl={true}
                  fullWidth={true}
                  helperText="courses:editor.startDateLabel"
                  inputProps={
                    Object {
                      "data-testid": "start-date-field",
                    }
                  }
                  inputVariant="outlined"
                  invalidDateMessage="Invalid Date Format"
                  maxDate={2100-01-01T00:00:00.000Z}
                  maxDateMessage="Date should not be after maximal date"
                  minDate={1900-01-01T00:00:00.000Z}
                  minDateMessage="Date should not be before minimal date"
                  name="startDate"
                  onChange={[Function]}
                  openTo="date"
                  value={2000-11-22T00:00:00.000Z}
                  views={
                    Array [
                      "year",
                      "date",
                    ]
                  }
                >
                  <Wrapper
                    DateInputProps={
                      Object {
                        "inputValue": "November 22nd",
                        "openPicker": [Function],
                        "validationError": "",
                      }
                    }
                    InputComponent={[Function]}
                    format="MMMM do"
                    fullWidth={true}
                    helperText="courses:editor.startDateLabel"
                    inputProps={
                      Object {
                        "data-testid": "start-date-field",
                      }
                    }
                    inputVariant="outlined"
                    name="startDate"
                    onAccept={[Function]}
                    onClear={[Function]}
                    onDismiss={[Function]}
                    onSetToday={[Function]}
                    open={false}
                  >
                    <ModalWrapper
                      DateInputProps={
                        Object {
                          "inputValue": "November 22nd",
                          "openPicker": [Function],
                          "validationError": "",
                        }
                      }
                      InputComponent={[Function]}
                      cancelLabel="Cancel"
                      clearLabel="Clear"
                      clearable={false}
                      format="MMMM do"
                      fullWidth={true}
                      helperText="courses:editor.startDateLabel"
                      inputProps={
                        Object {
                          "data-testid": "start-date-field",
                        }
                      }
                      inputVariant="outlined"
                      name="startDate"
                      okLabel="OK"
                      onAccept={[Function]}
                      onClear={[Function]}
                      onDismiss={[Function]}
                      onSetToday={[Function]}
                      open={false}
                      showTodayButton={false}
                      todayLabel="Today"
                    >
                      <PureDateInput
                        format="MMMM do"
                        fullWidth={true}
                        helperText="courses:editor.startDateLabel"
                        inputProps={
                          Object {
                            "data-testid": "start-date-field",
                          }
                        }
                        inputValue="November 22nd"
                        inputVariant="outlined"
                        name="startDate"
                        openPicker={[Function]}
                        validationError=""
                      >
                        <WithStyles(ForwardRef(TextField))
                          InputProps={
                            Object {
                              "readOnly": true,
                            }
                          }
                          error={false}
                          format="MMMM do"
                          fullWidth={true}
                          helperText="courses:editor.startDateLabel"
                          inputProps={
                            Object {
                              "data-testid": "start-date-field",
                            }
                          }
                          name="startDate"
                          onClick={[Function]}
                          onKeyDown={[Function]}
                          value="November 22nd"
                          variant="outlined"
                        >
                          <ForwardRef(TextField)
                            InputProps={
                              Object {
                                "readOnly": true,
                              }
                            }
                            classes={
                              Object {
                                "root": "MuiTextField-root",
                              }
                            }
                            error={false}
                            format="MMMM do"
                            fullWidth={true}
                            helperText="courses:editor.startDateLabel"
                            inputProps={
                              Object {
                                "data-testid": "start-date-field",
                              }
                            }
                            name="startDate"
                            onClick={[Function]}
                            onKeyDown={[Function]}
                            value="November 22nd"
                            variant="outlined"
                          >
                            <WithStyles(ForwardRef(FormControl))
                              className="MuiTextField-root"
                              color="primary"
                              disabled={false}
                              error={false}
                              format="MMMM do"
                              fullWidth={true}
                              onClick={[Function]}
                              onKeyDown={[Function]}
                              required={false}
                              variant="outlined"
                            >
                              <ForwardRef(FormControl)
                                className="MuiTextField-root"
                                classes={
                                  Object {
                                    "fullWidth": "MuiFormControl-fullWidth",
                                    "marginDense": "MuiFormControl-marginDense",
                                    "marginNormal": "MuiFormControl-marginNormal",
                                    "root": "MuiFormControl-root",
                                  }
                                }
                                color="primary"
                                disabled={false}
                                error={false}
                                format="MMMM do"
                                fullWidth={true}
                                onClick={[Function]}
                                onKeyDown={[Function]}
                                required={false}
                                variant="outlined"
                              >
                                <div
                                  className="MuiFormControl-root MuiTextField-root MuiFormControl-fullWidth"
                                  format="MMMM do"
                                  onClick={[Function]}
                                  onKeyDown={[Function]}
                                >
                                  <WithStyles(ForwardRef(OutlinedInput))
                                    autoFocus={false}
                                    fullWidth={true}
                                    inputProps={
                                      Object {
                                        "data-testid": "start-date-field",
                                      }
                                    }
                                    multiline={false}
                                    name="startDate"
                                    readOnly={true}
                                    value="November 22nd"
                                  >
                                    <ForwardRef(OutlinedInput)
                                      autoFocus={false}
                                      classes={
                                        Object {
                                          "adornedEnd": "MuiOutlinedInput-adornedEnd",
                                          "adornedStart": "MuiOutlinedInput-adornedStart",
                                          "colorSecondary": "MuiOutlinedInput-colorSecondary",
                                          "disabled": "Mui-disabled",
                                          "error": "Mui-error",
                                          "focused": "Mui-focused",
                                          "input": "MuiOutlinedInput-input",
                                          "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                                          "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                                          "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                                          "inputMultiline": "MuiOutlinedInput-inputMultiline",
                                          "marginDense": "MuiOutlinedInput-marginDense",
                                          "multiline": "MuiOutlinedInput-multiline",
                                          "notchedOutline": "MuiOutlinedInput-notchedOutline",
                                          "root": "MuiOutlinedInput-root",
                                        }
                                      }
                                      fullWidth={true}
                                      inputProps={
                                        Object {
                                          "data-testid": "start-date-field",
                                        }
                                      }
                                      multiline={false}
                                      name="startDate"
                                      readOnly={true}
                                      value="November 22nd"
                                    >
                                      <WithStyles(ForwardRef(InputBase))
                                        autoFocus={false}
                                        classes={
                                          Object {
                                            "adornedEnd": "MuiOutlinedInput-adornedEnd",
                                            "adornedStart": "MuiOutlinedInput-adornedStart",
                                            "colorSecondary": "MuiOutlinedInput-colorSecondary",
                                            "disabled": "Mui-disabled",
                                            "error": "Mui-error",
                                            "focused": "Mui-focused",
                                            "input": "MuiOutlinedInput-input",
                                            "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                                            "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                                            "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                                            "inputMultiline": "MuiOutlinedInput-inputMultiline",
                                            "marginDense": "MuiOutlinedInput-marginDense",
                                            "multiline": "MuiOutlinedInput-multiline",
                                            "notchedOutline": null,
                                            "root": "MuiOutlinedInput-root",
                                          }
                                        }
                                        fullWidth={true}
                                        inputComponent="input"
                                        inputProps={
                                          Object {
                                            "data-testid": "start-date-field",
                                          }
                                        }
                                        multiline={false}
                                        name="startDate"
                                        readOnly={true}
                                        renderSuffix={[Function]}
                                        type="text"
                                        value="November 22nd"
                                      >
                                        <ForwardRef(InputBase)
                                          autoFocus={false}
                                          classes={
                                            Object {
                                              "adornedEnd": "MuiInputBase-adornedEnd MuiOutlinedInput-adornedEnd",
                                              "adornedStart": "MuiInputBase-adornedStart MuiOutlinedInput-adornedStart",
                                              "colorSecondary": "MuiInputBase-colorSecondary MuiOutlinedInput-colorSecondary",
                                              "disabled": "Mui-disabled Mui-disabled",
                                              "error": "Mui-error Mui-error",
                                              "focused": "Mui-focused Mui-focused",
                                              "formControl": "MuiInputBase-formControl",
                                              "fullWidth": "MuiInputBase-fullWidth",
                                              "input": "MuiInputBase-input MuiOutlinedInput-input",
                                              "inputAdornedEnd": "MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd",
                                              "inputAdornedStart": "MuiInputBase-inputAdornedStart MuiOutlinedInput-inputAdornedStart",
                                              "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                              "inputMarginDense": "MuiInputBase-inputMarginDense MuiOutlinedInput-inputMarginDense",
                                              "inputMultiline": "MuiInputBase-inputMultiline MuiOutlinedInput-inputMultiline",
                                              "inputTypeSearch": "MuiInputBase-inputTypeSearch",
                                              "marginDense": "MuiInputBase-marginDense MuiOutlinedInput-marginDense",
                                              "multiline": "MuiInputBase-multiline MuiOutlinedInput-multiline",
                                              "root": "MuiInputBase-root MuiOutlinedInput-root",
                                            }
                                          }
                                          fullWidth={true}
                                          inputComponent="input"
                                          inputProps={
                                            Object {
                                              "data-testid": "start-date-field",
                                            }
                                          }
                                          multiline={false}
                                          name="startDate"
                                          readOnly={true}
                                          renderSuffix={[Function]}
                                          type="text"
                                          value="November 22nd"
                                        >
                                          <div
                                            className="MuiInputBase-root MuiOutlinedInput-root MuiInputBase-fullWidth MuiInputBase-formControl"
                                            onClick={[Function]}
                                          >
                                            <input
                                              aria-invalid={false}
                                              autoFocus={false}
                                              className="MuiInputBase-input MuiOutlinedInput-input"
                                              data-testid="start-date-field"
                                              disabled={false}
                                              name="startDate"
                                              onAnimationStart={[Function]}
                                              onBlur={[Function]}
                                              onChange={[Function]}
                                              onFocus={[Function]}
                                              readOnly={true}
                                              required={false}
                                              type="text"
                                              value="November 22nd"
                                            />
                                            <WithStyles(ForwardRef(NotchedOutline))
                                              className="MuiOutlinedInput-notchedOutline"
                                              labelWidth={0}
                                              notched={true}
                                            >
                                              <ForwardRef(NotchedOutline)
                                                className="MuiOutlinedInput-notchedOutline"
                                                classes={
                                                  Object {
                                                    "legend": "PrivateNotchedOutline-legend-2",
                                                    "legendLabelled": "PrivateNotchedOutline-legendLabelled-3",
                                                    "legendNotched": "PrivateNotchedOutline-legendNotched-4",
                                                    "root": "PrivateNotchedOutline-root-1",
                                                  }
                                                }
                                                labelWidth={0}
                                                notched={true}
                                              >
                                                <fieldset
                                                  aria-hidden={true}
                                                  className="PrivateNotchedOutline-root-1 MuiOutlinedInput-notchedOutline"
                                                  style={
                                                    Object {
                                                      "paddingLeft": 8,
                                                    }
                                                  }
                                                >
                                                  <legend
                                                    className="PrivateNotchedOutline-legend-2"
                                                    style={
                                                      Object {
                                                        "width": 0.01,
                                                      }
                                                    }
                                                  >
                                                    <span
                                                      dangerouslySetInnerHTML={
                                                        Object {
                                                          "__html": "&#8203;",
                                                        }
                                                      }
                                                    />
                                                  </legend>
                                                </fieldset>
                                              </ForwardRef(NotchedOutline)>
                                            </WithStyles(ForwardRef(NotchedOutline))>
                                          </div>
                                        </ForwardRef(InputBase)>
                                      </WithStyles(ForwardRef(InputBase))>
                                    </ForwardRef(OutlinedInput)>
                                  </WithStyles(ForwardRef(OutlinedInput))>
                                  <WithStyles(ForwardRef(FormHelperText))>
                                    <ForwardRef(FormHelperText)
                                      classes={
                                        Object {
                                          "contained": "MuiFormHelperText-contained",
                                          "disabled": "Mui-disabled",
                                          "error": "Mui-error",
                                          "filled": "MuiFormHelperText-filled",
                                          "focused": "Mui-focused",
                                          "marginDense": "MuiFormHelperText-marginDense",
                                          "required": "Mui-required",
                                          "root": "MuiFormHelperText-root",
                                        }
                                      }
                                    >
                                      <p
                                        className="MuiFormHelperText-root MuiFormHelperText-contained MuiFormHelperText-filled"
                                      >
                                        courses:editor.startDateLabel
                                      </p>
                                    </ForwardRef(FormHelperText)>
                                  </WithStyles(ForwardRef(FormHelperText))>
                                </div>
                              </ForwardRef(FormControl)>
                            </WithStyles(ForwardRef(FormControl))>
                          </ForwardRef(TextField)>
                        </WithStyles(ForwardRef(TextField))>
                      </PureDateInput>
                      <WithStyles(ModalDialog)
                        cancelLabel="Cancel"
                        clearLabel="Clear"
                        clearable={false}
                        okLabel="OK"
                        onAccept={[Function]}
                        onClear={[Function]}
                        onDismiss={[Function]}
                        onSetToday={[Function]}
                        open={false}
                        showTodayButton={false}
                        todayLabel="Today"
                      >
                        <ModalDialog
                          cancelLabel="Cancel"
                          classes={
                            Object {
                              "dialog": "MuiPickersModal-dialog",
                              "dialogRoot": "MuiPickersModal-dialogRoot",
                              "dialogRootWider": "MuiPickersModal-dialogRootWider",
                              "withAdditionalAction": "MuiPickersModal-withAdditionalAction",
                            }
                          }
                          clearLabel="Clear"
                          clearable={false}
                          okLabel="OK"
                          onAccept={[Function]}
                          onClear={[Function]}
                          onDismiss={[Function]}
                          onSetToday={[Function]}
                          open={false}
                          showTodayButton={false}
                          todayLabel="Today"
                        >
                          <WithStyles(ForwardRef(Dialog))
                            classes={
                              Object {
                                "paper": "MuiPickersModal-dialogRoot",
                              }
                            }
                            onClose={[Function]}
                            open={false}
                            role="dialog"
                          >
                            <ForwardRef(Dialog)
                              classes={
                                Object {
                                  "container": "MuiDialog-container",
                                  "paper": "MuiDialog-paper MuiPickersModal-dialogRoot",
                                  "paperFullScreen": "MuiDialog-paperFullScreen",
                                  "paperFullWidth": "MuiDialog-paperFullWidth",
                                  "paperScrollBody": "MuiDialog-paperScrollBody",
                                  "paperScrollPaper": "MuiDialog-paperScrollPaper",
                                  "paperWidthFalse": "MuiDialog-paperWidthFalse",
                                  "paperWidthLg": "MuiDialog-paperWidthLg",
                                  "paperWidthMd": "MuiDialog-paperWidthMd",
                                  "paperWidthSm": "MuiDialog-paperWidthSm",
                                  "paperWidthXl": "MuiDialog-paperWidthXl",
                                  "paperWidthXs": "MuiDialog-paperWidthXs",
                                  "root": "MuiDialog-root",
                                  "scrollBody": "MuiDialog-scrollBody",
                                  "scrollPaper": "MuiDialog-scrollPaper",
                                }
                              }
                              onClose={[Function]}
                              open={false}
                              role="dialog"
                            >
                              <ForwardRef(Modal)
                                BackdropComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "Naked": Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "propTypes": Object {
                                        "children": [Function],
                                        "className": [Function],
                                        "classes": [Function],
                                        "invisible": [Function],
                                        "open": [Function],
                                        "transitionDuration": [Function],
                                      },
                                      "render": [Function],
                                    },
                                    "options": Object {
                                      "defaultTheme": Object {
                                        "breakpoints": Object {
                                          "between": [Function],
                                          "down": [Function],
                                          "keys": Array [
                                            "xs",
                                            "sm",
                                            "md",
                                            "lg",
                                            "xl",
                                          ],
                                          "only": [Function],
                                          "up": [Function],
                                          "values": Object {
                                            "lg": 1280,
                                            "md": 960,
                                            "sm": 600,
                                            "xl": 1920,
                                            "xs": 0,
                                          },
                                          "width": [Function],
                                        },
                                        "direction": "ltr",
                                        "mixins": Object {
                                          "gutters": [Function],
                                          "toolbar": Object {
                                            "@media (min-width:0px) and (orientation: landscape)": Object {
                                              "minHeight": 48,
                                            },
                                            "@media (min-width:600px)": Object {
                                              "minHeight": 64,
                                            },
                                            "minHeight": 56,
                                          },
                                        },
                                        "overrides": Object {},
                                        "palette": Object {
                                          "action": Object {
                                            "activatedOpacity": 0.12,
                                            "active": "rgba(0, 0, 0, 0.54)",
                                            "disabled": "rgba(0, 0, 0, 0.26)",
                                            "disabledBackground": "rgba(0, 0, 0, 0.12)",
                                            "disabledOpacity": 0.38,
                                            "focus": "rgba(0, 0, 0, 0.12)",
                                            "focusOpacity": 0.12,
                                            "hover": "rgba(0, 0, 0, 0.04)",
                                            "hoverOpacity": 0.04,
                                            "selected": "rgba(0, 0, 0, 0.08)",
                                            "selectedOpacity": 0.08,
                                          },
                                          "augmentColor": [Function],
                                          "background": Object {
                                            "default": "#fafafa",
                                            "paper": "#fff",
                                          },
                                          "common": Object {
                                            "black": "#000",
                                            "white": "#fff",
                                          },
                                          "contrastThreshold": 3,
                                          "divider": "rgba(0, 0, 0, 0.12)",
                                          "error": Object {
                                            "contrastText": "#fff",
                                            "dark": "#d32f2f",
                                            "light": "#e57373",
                                            "main": "#f44336",
                                          },
                                          "getContrastText": [Function],
                                          "grey": Object {
                                            "100": "#f5f5f5",
                                            "200": "#eeeeee",
                                            "300": "#e0e0e0",
                                            "400": "#bdbdbd",
                                            "50": "#fafafa",
                                            "500": "#9e9e9e",
                                            "600": "#757575",
                                            "700": "#616161",
                                            "800": "#424242",
                                            "900": "#212121",
                                            "A100": "#d5d5d5",
                                            "A200": "#aaaaaa",
                                            "A400": "#303030",
                                            "A700": "#616161",
                                          },
                                          "info": Object {
                                            "contrastText": "#fff",
                                            "dark": "#1976d2",
                                            "light": "#64b5f6",
                                            "main": "#2196f3",
                                          },
                                          "primary": Object {
                                            "contrastText": "#fff",
                                            "dark": "#303f9f",
                                            "light": "#7986cb",
                                            "main": "#3f51b5",
                                          },
                                          "secondary": Object {
                                            "contrastText": "#fff",
                                            "dark": "#c51162",
                                            "light": "#ff4081",
                                            "main": "#f50057",
                                          },
                                          "success": Object {
                                            "contrastText": "rgba(0, 0, 0, 0.87)",
                                            "dark": "#388e3c",
                                            "light": "#81c784",
                                            "main": "#4caf50",
                                          },
                                          "text": Object {
                                            "disabled": "rgba(0, 0, 0, 0.38)",
                                            "hint": "rgba(0, 0, 0, 0.38)",
                                            "primary": "rgba(0, 0, 0, 0.87)",
                                            "secondary": "rgba(0, 0, 0, 0.54)",
                                          },
                                          "tonalOffset": 0.2,
                                          "type": "light",
                                          "warning": Object {
                                            "contrastText": "rgba(0, 0, 0, 0.87)",
                                            "dark": "#f57c00",
                                            "light": "#ffb74d",
                                            "main": "#ff9800",
                                          },
                                        },
                                        "props": Object {},
                                        "shadows": Array [
                                          "none",
                                          "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
                                          "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
                                          "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
                                          "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
                                          "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
                                          "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
                                          "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
                                          "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
                                          "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
                                          "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
                                          "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
                                          "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
                                          "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
                                          "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
                                          "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
                                          "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
                                          "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
                                          "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
                                          "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
                                          "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
                                          "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
                                          "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
                                          "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
                                          "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
                                        ],
                                        "shape": Object {
                                          "borderRadius": 4,
                                        },
                                        "spacing": [Function],
                                        "transitions": Object {
                                          "create": [Function],
                                          "duration": Object {
                                            "complex": 375,
                                            "enteringScreen": 225,
                                            "leavingScreen": 195,
                                            "short": 250,
                                            "shorter": 200,
                                            "shortest": 150,
                                            "standard": 300,
                                          },
                                          "easing": Object {
                                            "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                                            "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                                            "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                                            "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
                                          },
                                          "getAutoHeightDuration": [Function],
                                        },
                                        "typography": Object {
                                          "body1": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "1rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0.00938em",
                                            "lineHeight": 1.5,
                                          },
                                          "body2": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "0.875rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0.01071em",
                                            "lineHeight": 1.43,
                                          },
                                          "button": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "0.875rem",
                                            "fontWeight": 500,
                                            "letterSpacing": "0.02857em",
                                            "lineHeight": 1.75,
                                            "textTransform": "uppercase",
                                          },
                                          "caption": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "0.75rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0.03333em",
                                            "lineHeight": 1.66,
                                          },
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": 14,
                                          "fontWeightBold": 700,
                                          "fontWeightLight": 300,
                                          "fontWeightMedium": 500,
                                          "fontWeightRegular": 400,
                                          "h1": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "6rem",
                                            "fontWeight": 300,
                                            "letterSpacing": "-0.01562em",
                                            "lineHeight": 1.167,
                                          },
                                          "h2": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "3.75rem",
                                            "fontWeight": 300,
                                            "letterSpacing": "-0.00833em",
                                            "lineHeight": 1.2,
                                          },
                                          "h3": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "3rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0em",
                                            "lineHeight": 1.167,
                                          },
                                          "h4": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "2.125rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0.00735em",
                                            "lineHeight": 1.235,
                                          },
                                          "h5": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "1.5rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0em",
                                            "lineHeight": 1.334,
                                          },
                                          "h6": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "1.25rem",
                                            "fontWeight": 500,
                                            "letterSpacing": "0.0075em",
                                            "lineHeight": 1.6,
                                          },
                                          "htmlFontSize": 16,
                                          "overline": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "0.75rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0.08333em",
                                            "lineHeight": 2.66,
                                            "textTransform": "uppercase",
                                          },
                                          "pxToRem": [Function],
                                          "round": [Function],
                                          "subtitle1": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "1rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0.00938em",
                                            "lineHeight": 1.75,
                                          },
                                          "subtitle2": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "0.875rem",
                                            "fontWeight": 500,
                                            "letterSpacing": "0.00714em",
                                            "lineHeight": 1.57,
                                          },
                                        },
                                        "zIndex": Object {
                                          "appBar": 1100,
                                          "drawer": 1200,
                                          "mobileStepper": 1000,
                                          "modal": 1300,
                                          "snackbar": 1400,
                                          "speedDial": 1050,
                                          "tooltip": 1500,
                                        },
                                      },
                                      "name": "MuiBackdrop",
                                    },
                                    "propTypes": Object {
                                      "classes": [Function],
                                      "innerRef": [Function],
                                    },
                                    "render": [Function],
                                    "useStyles": [Function],
                                  }
                                }
                                BackdropProps={
                                  Object {
                                    "transitionDuration": Object {
                                      "enter": 225,
                                      "exit": 195,
                                    },
                                  }
                                }
                                className="MuiDialog-root"
                                closeAfterTransition={true}
                                disableBackdropClick={false}
                                disableEscapeKeyDown={false}
                                onClose={[Function]}
                                open={false}
                                role="dialog"
                              />
                            </ForwardRef(Dialog)>
                          </WithStyles(ForwardRef(Dialog))>
                        </ModalDialog>
                      </WithStyles(ModalDialog)>
                    </ModalWrapper>
                  </Wrapper>
                </PickerWithState>
                <PickerWithState
                  ampm={true}
                  className="timepicker"
                  fullWidth={true}
                  helperText="courses:editor.startTimeLabel"
                  inputProps={
                    Object {
                      "data-testid": "start-time-field",
                    }
                  }
                  inputVariant="outlined"
                  invalidDateMessage="Invalid Time Format"
                  name="startTime"
                  onChange={[Function]}
                  openTo="hours"
                  value={2000-11-22T00:00:00.000Z}
                  views={
                    Array [
                      "hours",
                      "minutes",
                    ]
                  }
                >
                  <Wrapper
                    DateInputProps={
                      Object {
                        "inputValue": "02:00 AM",
                        "openPicker": [Function],
                        "validationError": "",
                      }
                    }
                    InputComponent={[Function]}
                    className="timepicker"
                    format="hh:mm a"
                    fullWidth={true}
                    helperText="courses:editor.startTimeLabel"
                    inputProps={
                      Object {
                        "data-testid": "start-time-field",
                      }
                    }
                    inputVariant="outlined"
                    name="startTime"
                    onAccept={[Function]}
                    onClear={[Function]}
                    onDismiss={[Function]}
                    onSetToday={[Function]}
                    open={false}
                  >
                    <ModalWrapper
                      DateInputProps={
                        Object {
                          "inputValue": "02:00 AM",
                          "openPicker": [Function],
                          "validationError": "",
                        }
                      }
                      InputComponent={[Function]}
                      cancelLabel="Cancel"
                      className="timepicker"
                      clearLabel="Clear"
                      clearable={false}
                      format="hh:mm a"
                      fullWidth={true}
                      helperText="courses:editor.startTimeLabel"
                      inputProps={
                        Object {
                          "data-testid": "start-time-field",
                        }
                      }
                      inputVariant="outlined"
                      name="startTime"
                      okLabel="OK"
                      onAccept={[Function]}
                      onClear={[Function]}
                      onDismiss={[Function]}
                      onSetToday={[Function]}
                      open={false}
                      showTodayButton={false}
                      todayLabel="Today"
                    >
                      <PureDateInput
                        className="timepicker"
                        format="hh:mm a"
                        fullWidth={true}
                        helperText="courses:editor.startTimeLabel"
                        inputProps={
                          Object {
                            "data-testid": "start-time-field",
                          }
                        }
                        inputValue="02:00 AM"
                        inputVariant="outlined"
                        name="startTime"
                        openPicker={[Function]}
                        validationError=""
                      >
                        <WithStyles(ForwardRef(TextField))
                          InputProps={
                            Object {
                              "readOnly": true,
                            }
                          }
                          className="timepicker"
                          error={false}
                          format="hh:mm a"
                          fullWidth={true}
                          helperText="courses:editor.startTimeLabel"
                          inputProps={
                            Object {
                              "data-testid": "start-time-field",
                            }
                          }
                          name="startTime"
                          onClick={[Function]}
                          onKeyDown={[Function]}
                          value="02:00 AM"
                          variant="outlined"
                        >
                          <ForwardRef(TextField)
                            InputProps={
                              Object {
                                "readOnly": true,
                              }
                            }
                            className="timepicker"
                            classes={
                              Object {
                                "root": "MuiTextField-root",
                              }
                            }
                            error={false}
                            format="hh:mm a"
                            fullWidth={true}
                            helperText="courses:editor.startTimeLabel"
                            inputProps={
                              Object {
                                "data-testid": "start-time-field",
                              }
                            }
                            name="startTime"
                            onClick={[Function]}
                            onKeyDown={[Function]}
                            value="02:00 AM"
                            variant="outlined"
                          >
                            <WithStyles(ForwardRef(FormControl))
                              className="MuiTextField-root timepicker"
                              color="primary"
                              disabled={false}
                              error={false}
                              format="hh:mm a"
                              fullWidth={true}
                              onClick={[Function]}
                              onKeyDown={[Function]}
                              required={false}
                              variant="outlined"
                            >
                              <ForwardRef(FormControl)
                                className="MuiTextField-root timepicker"
                                classes={
                                  Object {
                                    "fullWidth": "MuiFormControl-fullWidth",
                                    "marginDense": "MuiFormControl-marginDense",
                                    "marginNormal": "MuiFormControl-marginNormal",
                                    "root": "MuiFormControl-root",
                                  }
                                }
                                color="primary"
                                disabled={false}
                                error={false}
                                format="hh:mm a"
                                fullWidth={true}
                                onClick={[Function]}
                                onKeyDown={[Function]}
                                required={false}
                                variant="outlined"
                              >
                                <div
                                  className="MuiFormControl-root MuiTextField-root timepicker MuiFormControl-fullWidth"
                                  format="hh:mm a"
                                  onClick={[Function]}
                                  onKeyDown={[Function]}
                                >
                                  <WithStyles(ForwardRef(OutlinedInput))
                                    autoFocus={false}
                                    fullWidth={true}
                                    inputProps={
                                      Object {
                                        "data-testid": "start-time-field",
                                      }
                                    }
                                    multiline={false}
                                    name="startTime"
                                    readOnly={true}
                                    value="02:00 AM"
                                  >
                                    <ForwardRef(OutlinedInput)
                                      autoFocus={false}
                                      classes={
                                        Object {
                                          "adornedEnd": "MuiOutlinedInput-adornedEnd",
                                          "adornedStart": "MuiOutlinedInput-adornedStart",
                                          "colorSecondary": "MuiOutlinedInput-colorSecondary",
                                          "disabled": "Mui-disabled",
                                          "error": "Mui-error",
                                          "focused": "Mui-focused",
                                          "input": "MuiOutlinedInput-input",
                                          "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                                          "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                                          "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                                          "inputMultiline": "MuiOutlinedInput-inputMultiline",
                                          "marginDense": "MuiOutlinedInput-marginDense",
                                          "multiline": "MuiOutlinedInput-multiline",
                                          "notchedOutline": "MuiOutlinedInput-notchedOutline",
                                          "root": "MuiOutlinedInput-root",
                                        }
                                      }
                                      fullWidth={true}
                                      inputProps={
                                        Object {
                                          "data-testid": "start-time-field",
                                        }
                                      }
                                      multiline={false}
                                      name="startTime"
                                      readOnly={true}
                                      value="02:00 AM"
                                    >
                                      <WithStyles(ForwardRef(InputBase))
                                        autoFocus={false}
                                        classes={
                                          Object {
                                            "adornedEnd": "MuiOutlinedInput-adornedEnd",
                                            "adornedStart": "MuiOutlinedInput-adornedStart",
                                            "colorSecondary": "MuiOutlinedInput-colorSecondary",
                                            "disabled": "Mui-disabled",
                                            "error": "Mui-error",
                                            "focused": "Mui-focused",
                                            "input": "MuiOutlinedInput-input",
                                            "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                                            "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                                            "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                                            "inputMultiline": "MuiOutlinedInput-inputMultiline",
                                            "marginDense": "MuiOutlinedInput-marginDense",
                                            "multiline": "MuiOutlinedInput-multiline",
                                            "notchedOutline": null,
                                            "root": "MuiOutlinedInput-root",
                                          }
                                        }
                                        fullWidth={true}
                                        inputComponent="input"
                                        inputProps={
                                          Object {
                                            "data-testid": "start-time-field",
                                          }
                                        }
                                        multiline={false}
                                        name="startTime"
                                        readOnly={true}
                                        renderSuffix={[Function]}
                                        type="text"
                                        value="02:00 AM"
                                      >
                                        <ForwardRef(InputBase)
                                          autoFocus={false}
                                          classes={
                                            Object {
                                              "adornedEnd": "MuiInputBase-adornedEnd MuiOutlinedInput-adornedEnd",
                                              "adornedStart": "MuiInputBase-adornedStart MuiOutlinedInput-adornedStart",
                                              "colorSecondary": "MuiInputBase-colorSecondary MuiOutlinedInput-colorSecondary",
                                              "disabled": "Mui-disabled Mui-disabled",
                                              "error": "Mui-error Mui-error",
                                              "focused": "Mui-focused Mui-focused",
                                              "formControl": "MuiInputBase-formControl",
                                              "fullWidth": "MuiInputBase-fullWidth",
                                              "input": "MuiInputBase-input MuiOutlinedInput-input",
                                              "inputAdornedEnd": "MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd",
                                              "inputAdornedStart": "MuiInputBase-inputAdornedStart MuiOutlinedInput-inputAdornedStart",
                                              "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                              "inputMarginDense": "MuiInputBase-inputMarginDense MuiOutlinedInput-inputMarginDense",
                                              "inputMultiline": "MuiInputBase-inputMultiline MuiOutlinedInput-inputMultiline",
                                              "inputTypeSearch": "MuiInputBase-inputTypeSearch",
                                              "marginDense": "MuiInputBase-marginDense MuiOutlinedInput-marginDense",
                                              "multiline": "MuiInputBase-multiline MuiOutlinedInput-multiline",
                                              "root": "MuiInputBase-root MuiOutlinedInput-root",
                                            }
                                          }
                                          fullWidth={true}
                                          inputComponent="input"
                                          inputProps={
                                            Object {
                                              "data-testid": "start-time-field",
                                            }
                                          }
                                          multiline={false}
                                          name="startTime"
                                          readOnly={true}
                                          renderSuffix={[Function]}
                                          type="text"
                                          value="02:00 AM"
                                        >
                                          <div
                                            className="MuiInputBase-root MuiOutlinedInput-root MuiInputBase-fullWidth MuiInputBase-formControl"
                                            onClick={[Function]}
                                          >
                                            <input
                                              aria-invalid={false}
                                              autoFocus={false}
                                              className="MuiInputBase-input MuiOutlinedInput-input"
                                              data-testid="start-time-field"
                                              disabled={false}
                                              name="startTime"
                                              onAnimationStart={[Function]}
                                              onBlur={[Function]}
                                              onChange={[Function]}
                                              onFocus={[Function]}
                                              readOnly={true}
                                              required={false}
                                              type="text"
                                              value="02:00 AM"
                                            />
                                            <WithStyles(ForwardRef(NotchedOutline))
                                              className="MuiOutlinedInput-notchedOutline"
                                              labelWidth={0}
                                              notched={true}
                                            >
                                              <ForwardRef(NotchedOutline)
                                                className="MuiOutlinedInput-notchedOutline"
                                                classes={
                                                  Object {
                                                    "legend": "PrivateNotchedOutline-legend-2",
                                                    "legendLabelled": "PrivateNotchedOutline-legendLabelled-3",
                                                    "legendNotched": "PrivateNotchedOutline-legendNotched-4",
                                                    "root": "PrivateNotchedOutline-root-1",
                                                  }
                                                }
                                                labelWidth={0}
                                                notched={true}
                                              >
                                                <fieldset
                                                  aria-hidden={true}
                                                  className="PrivateNotchedOutline-root-1 MuiOutlinedInput-notchedOutline"
                                                  style={
                                                    Object {
                                                      "paddingLeft": 8,
                                                    }
                                                  }
                                                >
                                                  <legend
                                                    className="PrivateNotchedOutline-legend-2"
                                                    style={
                                                      Object {
                                                        "width": 0.01,
                                                      }
                                                    }
                                                  >
                                                    <span
                                                      dangerouslySetInnerHTML={
                                                        Object {
                                                          "__html": "&#8203;",
                                                        }
                                                      }
                                                    />
                                                  </legend>
                                                </fieldset>
                                              </ForwardRef(NotchedOutline)>
                                            </WithStyles(ForwardRef(NotchedOutline))>
                                          </div>
                                        </ForwardRef(InputBase)>
                                      </WithStyles(ForwardRef(InputBase))>
                                    </ForwardRef(OutlinedInput)>
                                  </WithStyles(ForwardRef(OutlinedInput))>
                                  <WithStyles(ForwardRef(FormHelperText))>
                                    <ForwardRef(FormHelperText)
                                      classes={
                                        Object {
                                          "contained": "MuiFormHelperText-contained",
                                          "disabled": "Mui-disabled",
                                          "error": "Mui-error",
                                          "filled": "MuiFormHelperText-filled",
                                          "focused": "Mui-focused",
                                          "marginDense": "MuiFormHelperText-marginDense",
                                          "required": "Mui-required",
                                          "root": "MuiFormHelperText-root",
                                        }
                                      }
                                    >
                                      <p
                                        className="MuiFormHelperText-root MuiFormHelperText-contained MuiFormHelperText-filled"
                                      >
                                        courses:editor.startTimeLabel
                                      </p>
                                    </ForwardRef(FormHelperText)>
                                  </WithStyles(ForwardRef(FormHelperText))>
                                </div>
                              </ForwardRef(FormControl)>
                            </WithStyles(ForwardRef(FormControl))>
                          </ForwardRef(TextField)>
                        </WithStyles(ForwardRef(TextField))>
                      </PureDateInput>
                      <WithStyles(ModalDialog)
                        cancelLabel="Cancel"
                        clearLabel="Clear"
                        clearable={false}
                        okLabel="OK"
                        onAccept={[Function]}
                        onClear={[Function]}
                        onDismiss={[Function]}
                        onSetToday={[Function]}
                        open={false}
                        showTodayButton={false}
                        todayLabel="Today"
                      >
                        <ModalDialog
                          cancelLabel="Cancel"
                          classes={
                            Object {
                              "dialog": "MuiPickersModal-dialog",
                              "dialogRoot": "MuiPickersModal-dialogRoot",
                              "dialogRootWider": "MuiPickersModal-dialogRootWider",
                              "withAdditionalAction": "MuiPickersModal-withAdditionalAction",
                            }
                          }
                          clearLabel="Clear"
                          clearable={false}
                          okLabel="OK"
                          onAccept={[Function]}
                          onClear={[Function]}
                          onDismiss={[Function]}
                          onSetToday={[Function]}
                          open={false}
                          showTodayButton={false}
                          todayLabel="Today"
                        >
                          <WithStyles(ForwardRef(Dialog))
                            classes={
                              Object {
                                "paper": "MuiPickersModal-dialogRoot",
                              }
                            }
                            onClose={[Function]}
                            open={false}
                            role="dialog"
                          >
                            <ForwardRef(Dialog)
                              classes={
                                Object {
                                  "container": "MuiDialog-container",
                                  "paper": "MuiDialog-paper MuiPickersModal-dialogRoot",
                                  "paperFullScreen": "MuiDialog-paperFullScreen",
                                  "paperFullWidth": "MuiDialog-paperFullWidth",
                                  "paperScrollBody": "MuiDialog-paperScrollBody",
                                  "paperScrollPaper": "MuiDialog-paperScrollPaper",
                                  "paperWidthFalse": "MuiDialog-paperWidthFalse",
                                  "paperWidthLg": "MuiDialog-paperWidthLg",
                                  "paperWidthMd": "MuiDialog-paperWidthMd",
                                  "paperWidthSm": "MuiDialog-paperWidthSm",
                                  "paperWidthXl": "MuiDialog-paperWidthXl",
                                  "paperWidthXs": "MuiDialog-paperWidthXs",
                                  "root": "MuiDialog-root",
                                  "scrollBody": "MuiDialog-scrollBody",
                                  "scrollPaper": "MuiDialog-scrollPaper",
                                }
                              }
                              onClose={[Function]}
                              open={false}
                              role="dialog"
                            >
                              <ForwardRef(Modal)
                                BackdropComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "Naked": Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "propTypes": Object {
                                        "children": [Function],
                                        "className": [Function],
                                        "classes": [Function],
                                        "invisible": [Function],
                                        "open": [Function],
                                        "transitionDuration": [Function],
                                      },
                                      "render": [Function],
                                    },
                                    "options": Object {
                                      "defaultTheme": Object {
                                        "breakpoints": Object {
                                          "between": [Function],
                                          "down": [Function],
                                          "keys": Array [
                                            "xs",
                                            "sm",
                                            "md",
                                            "lg",
                                            "xl",
                                          ],
                                          "only": [Function],
                                          "up": [Function],
                                          "values": Object {
                                            "lg": 1280,
                                            "md": 960,
                                            "sm": 600,
                                            "xl": 1920,
                                            "xs": 0,
                                          },
                                          "width": [Function],
                                        },
                                        "direction": "ltr",
                                        "mixins": Object {
                                          "gutters": [Function],
                                          "toolbar": Object {
                                            "@media (min-width:0px) and (orientation: landscape)": Object {
                                              "minHeight": 48,
                                            },
                                            "@media (min-width:600px)": Object {
                                              "minHeight": 64,
                                            },
                                            "minHeight": 56,
                                          },
                                        },
                                        "overrides": Object {},
                                        "palette": Object {
                                          "action": Object {
                                            "activatedOpacity": 0.12,
                                            "active": "rgba(0, 0, 0, 0.54)",
                                            "disabled": "rgba(0, 0, 0, 0.26)",
                                            "disabledBackground": "rgba(0, 0, 0, 0.12)",
                                            "disabledOpacity": 0.38,
                                            "focus": "rgba(0, 0, 0, 0.12)",
                                            "focusOpacity": 0.12,
                                            "hover": "rgba(0, 0, 0, 0.04)",
                                            "hoverOpacity": 0.04,
                                            "selected": "rgba(0, 0, 0, 0.08)",
                                            "selectedOpacity": 0.08,
                                          },
                                          "augmentColor": [Function],
                                          "background": Object {
                                            "default": "#fafafa",
                                            "paper": "#fff",
                                          },
                                          "common": Object {
                                            "black": "#000",
                                            "white": "#fff",
                                          },
                                          "contrastThreshold": 3,
                                          "divider": "rgba(0, 0, 0, 0.12)",
                                          "error": Object {
                                            "contrastText": "#fff",
                                            "dark": "#d32f2f",
                                            "light": "#e57373",
                                            "main": "#f44336",
                                          },
                                          "getContrastText": [Function],
                                          "grey": Object {
                                            "100": "#f5f5f5",
                                            "200": "#eeeeee",
                                            "300": "#e0e0e0",
                                            "400": "#bdbdbd",
                                            "50": "#fafafa",
                                            "500": "#9e9e9e",
                                            "600": "#757575",
                                            "700": "#616161",
                                            "800": "#424242",
                                            "900": "#212121",
                                            "A100": "#d5d5d5",
                                            "A200": "#aaaaaa",
                                            "A400": "#303030",
                                            "A700": "#616161",
                                          },
                                          "info": Object {
                                            "contrastText": "#fff",
                                            "dark": "#1976d2",
                                            "light": "#64b5f6",
                                            "main": "#2196f3",
                                          },
                                          "primary": Object {
                                            "contrastText": "#fff",
                                            "dark": "#303f9f",
                                            "light": "#7986cb",
                                            "main": "#3f51b5",
                                          },
                                          "secondary": Object {
                                            "contrastText": "#fff",
                                            "dark": "#c51162",
                                            "light": "#ff4081",
                                            "main": "#f50057",
                                          },
                                          "success": Object {
                                            "contrastText": "rgba(0, 0, 0, 0.87)",
                                            "dark": "#388e3c",
                                            "light": "#81c784",
                                            "main": "#4caf50",
                                          },
                                          "text": Object {
                                            "disabled": "rgba(0, 0, 0, 0.38)",
                                            "hint": "rgba(0, 0, 0, 0.38)",
                                            "primary": "rgba(0, 0, 0, 0.87)",
                                            "secondary": "rgba(0, 0, 0, 0.54)",
                                          },
                                          "tonalOffset": 0.2,
                                          "type": "light",
                                          "warning": Object {
                                            "contrastText": "rgba(0, 0, 0, 0.87)",
                                            "dark": "#f57c00",
                                            "light": "#ffb74d",
                                            "main": "#ff9800",
                                          },
                                        },
                                        "props": Object {},
                                        "shadows": Array [
                                          "none",
                                          "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
                                          "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
                                          "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
                                          "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
                                          "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
                                          "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
                                          "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
                                          "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
                                          "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
                                          "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
                                          "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
                                          "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
                                          "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
                                          "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
                                          "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
                                          "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
                                          "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
                                          "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
                                          "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
                                          "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
                                          "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
                                          "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
                                          "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
                                          "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
                                        ],
                                        "shape": Object {
                                          "borderRadius": 4,
                                        },
                                        "spacing": [Function],
                                        "transitions": Object {
                                          "create": [Function],
                                          "duration": Object {
                                            "complex": 375,
                                            "enteringScreen": 225,
                                            "leavingScreen": 195,
                                            "short": 250,
                                            "shorter": 200,
                                            "shortest": 150,
                                            "standard": 300,
                                          },
                                          "easing": Object {
                                            "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                                            "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                                            "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                                            "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
                                          },
                                          "getAutoHeightDuration": [Function],
                                        },
                                        "typography": Object {
                                          "body1": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "1rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0.00938em",
                                            "lineHeight": 1.5,
                                          },
                                          "body2": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "0.875rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0.01071em",
                                            "lineHeight": 1.43,
                                          },
                                          "button": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "0.875rem",
                                            "fontWeight": 500,
                                            "letterSpacing": "0.02857em",
                                            "lineHeight": 1.75,
                                            "textTransform": "uppercase",
                                          },
                                          "caption": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "0.75rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0.03333em",
                                            "lineHeight": 1.66,
                                          },
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": 14,
                                          "fontWeightBold": 700,
                                          "fontWeightLight": 300,
                                          "fontWeightMedium": 500,
                                          "fontWeightRegular": 400,
                                          "h1": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "6rem",
                                            "fontWeight": 300,
                                            "letterSpacing": "-0.01562em",
                                            "lineHeight": 1.167,
                                          },
                                          "h2": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "3.75rem",
                                            "fontWeight": 300,
                                            "letterSpacing": "-0.00833em",
                                            "lineHeight": 1.2,
                                          },
                                          "h3": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "3rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0em",
                                            "lineHeight": 1.167,
                                          },
                                          "h4": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "2.125rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0.00735em",
                                            "lineHeight": 1.235,
                                          },
                                          "h5": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "1.5rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0em",
                                            "lineHeight": 1.334,
                                          },
                                          "h6": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "1.25rem",
                                            "fontWeight": 500,
                                            "letterSpacing": "0.0075em",
                                            "lineHeight": 1.6,
                                          },
                                          "htmlFontSize": 16,
                                          "overline": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "0.75rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0.08333em",
                                            "lineHeight": 2.66,
                                            "textTransform": "uppercase",
                                          },
                                          "pxToRem": [Function],
                                          "round": [Function],
                                          "subtitle1": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "1rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0.00938em",
                                            "lineHeight": 1.75,
                                          },
                                          "subtitle2": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "0.875rem",
                                            "fontWeight": 500,
                                            "letterSpacing": "0.00714em",
                                            "lineHeight": 1.57,
                                          },
                                        },
                                        "zIndex": Object {
                                          "appBar": 1100,
                                          "drawer": 1200,
                                          "mobileStepper": 1000,
                                          "modal": 1300,
                                          "snackbar": 1400,
                                          "speedDial": 1050,
                                          "tooltip": 1500,
                                        },
                                      },
                                      "name": "MuiBackdrop",
                                    },
                                    "propTypes": Object {
                                      "classes": [Function],
                                      "innerRef": [Function],
                                    },
                                    "render": [Function],
                                    "useStyles": [Function],
                                  }
                                }
                                BackdropProps={
                                  Object {
                                    "transitionDuration": Object {
                                      "enter": 225,
                                      "exit": 195,
                                    },
                                  }
                                }
                                className="MuiDialog-root"
                                closeAfterTransition={true}
                                disableBackdropClick={false}
                                disableEscapeKeyDown={false}
                                onClose={[Function]}
                                open={false}
                                role="dialog"
                              />
                            </ForwardRef(Dialog)>
                          </WithStyles(ForwardRef(Dialog))>
                        </ModalDialog>
                      </WithStyles(ModalDialog)>
                    </ModalWrapper>
                  </Wrapper>
                </PickerWithState>
              </div>
              <div
                className="dateTimeRow"
              >
                <PickerWithState
                  allowKeyboardControl={true}
                  fullWidth={true}
                  helperText="courses:editor.endDateLabel"
                  inputProps={
                    Object {
                      "data-testid": "end-date-field",
                    }
                  }
                  inputVariant="outlined"
                  invalidDateMessage="Invalid Date Format"
                  maxDate={2100-01-01T00:00:00.000Z}
                  maxDateMessage="Date should not be after maximal date"
                  minDate={1900-01-01T00:00:00.000Z}
                  minDateMessage="Date should not be before minimal date"
                  name="endDate"
                  onChange={[Function]}
                  openTo="date"
                  value={2000-11-22T00:00:00.000Z}
                  views={
                    Array [
                      "year",
                      "date",
                    ]
                  }
                >
                  <Wrapper
                    DateInputProps={
                      Object {
                        "inputValue": "November 22nd",
                        "openPicker": [Function],
                        "validationError": "",
                      }
                    }
                    InputComponent={[Function]}
                    format="MMMM do"
                    fullWidth={true}
                    helperText="courses:editor.endDateLabel"
                    inputProps={
                      Object {
                        "data-testid": "end-date-field",
                      }
                    }
                    inputVariant="outlined"
                    name="endDate"
                    onAccept={[Function]}
                    onClear={[Function]}
                    onDismiss={[Function]}
                    onSetToday={[Function]}
                    open={false}
                  >
                    <ModalWrapper
                      DateInputProps={
                        Object {
                          "inputValue": "November 22nd",
                          "openPicker": [Function],
                          "validationError": "",
                        }
                      }
                      InputComponent={[Function]}
                      cancelLabel="Cancel"
                      clearLabel="Clear"
                      clearable={false}
                      format="MMMM do"
                      fullWidth={true}
                      helperText="courses:editor.endDateLabel"
                      inputProps={
                        Object {
                          "data-testid": "end-date-field",
                        }
                      }
                      inputVariant="outlined"
                      name="endDate"
                      okLabel="OK"
                      onAccept={[Function]}
                      onClear={[Function]}
                      onDismiss={[Function]}
                      onSetToday={[Function]}
                      open={false}
                      showTodayButton={false}
                      todayLabel="Today"
                    >
                      <PureDateInput
                        format="MMMM do"
                        fullWidth={true}
                        helperText="courses:editor.endDateLabel"
                        inputProps={
                          Object {
                            "data-testid": "end-date-field",
                          }
                        }
                        inputValue="November 22nd"
                        inputVariant="outlined"
                        name="endDate"
                        openPicker={[Function]}
                        validationError=""
                      >
                        <WithStyles(ForwardRef(TextField))
                          InputProps={
                            Object {
                              "readOnly": true,
                            }
                          }
                          error={false}
                          format="MMMM do"
                          fullWidth={true}
                          helperText="courses:editor.endDateLabel"
                          inputProps={
                            Object {
                              "data-testid": "end-date-field",
                            }
                          }
                          name="endDate"
                          onClick={[Function]}
                          onKeyDown={[Function]}
                          value="November 22nd"
                          variant="outlined"
                        >
                          <ForwardRef(TextField)
                            InputProps={
                              Object {
                                "readOnly": true,
                              }
                            }
                            classes={
                              Object {
                                "root": "MuiTextField-root",
                              }
                            }
                            error={false}
                            format="MMMM do"
                            fullWidth={true}
                            helperText="courses:editor.endDateLabel"
                            inputProps={
                              Object {
                                "data-testid": "end-date-field",
                              }
                            }
                            name="endDate"
                            onClick={[Function]}
                            onKeyDown={[Function]}
                            value="November 22nd"
                            variant="outlined"
                          >
                            <WithStyles(ForwardRef(FormControl))
                              className="MuiTextField-root"
                              color="primary"
                              disabled={false}
                              error={false}
                              format="MMMM do"
                              fullWidth={true}
                              onClick={[Function]}
                              onKeyDown={[Function]}
                              required={false}
                              variant="outlined"
                            >
                              <ForwardRef(FormControl)
                                className="MuiTextField-root"
                                classes={
                                  Object {
                                    "fullWidth": "MuiFormControl-fullWidth",
                                    "marginDense": "MuiFormControl-marginDense",
                                    "marginNormal": "MuiFormControl-marginNormal",
                                    "root": "MuiFormControl-root",
                                  }
                                }
                                color="primary"
                                disabled={false}
                                error={false}
                                format="MMMM do"
                                fullWidth={true}
                                onClick={[Function]}
                                onKeyDown={[Function]}
                                required={false}
                                variant="outlined"
                              >
                                <div
                                  className="MuiFormControl-root MuiTextField-root MuiFormControl-fullWidth"
                                  format="MMMM do"
                                  onClick={[Function]}
                                  onKeyDown={[Function]}
                                >
                                  <WithStyles(ForwardRef(OutlinedInput))
                                    autoFocus={false}
                                    fullWidth={true}
                                    inputProps={
                                      Object {
                                        "data-testid": "end-date-field",
                                      }
                                    }
                                    multiline={false}
                                    name="endDate"
                                    readOnly={true}
                                    value="November 22nd"
                                  >
                                    <ForwardRef(OutlinedInput)
                                      autoFocus={false}
                                      classes={
                                        Object {
                                          "adornedEnd": "MuiOutlinedInput-adornedEnd",
                                          "adornedStart": "MuiOutlinedInput-adornedStart",
                                          "colorSecondary": "MuiOutlinedInput-colorSecondary",
                                          "disabled": "Mui-disabled",
                                          "error": "Mui-error",
                                          "focused": "Mui-focused",
                                          "input": "MuiOutlinedInput-input",
                                          "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                                          "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                                          "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                                          "inputMultiline": "MuiOutlinedInput-inputMultiline",
                                          "marginDense": "MuiOutlinedInput-marginDense",
                                          "multiline": "MuiOutlinedInput-multiline",
                                          "notchedOutline": "MuiOutlinedInput-notchedOutline",
                                          "root": "MuiOutlinedInput-root",
                                        }
                                      }
                                      fullWidth={true}
                                      inputProps={
                                        Object {
                                          "data-testid": "end-date-field",
                                        }
                                      }
                                      multiline={false}
                                      name="endDate"
                                      readOnly={true}
                                      value="November 22nd"
                                    >
                                      <WithStyles(ForwardRef(InputBase))
                                        autoFocus={false}
                                        classes={
                                          Object {
                                            "adornedEnd": "MuiOutlinedInput-adornedEnd",
                                            "adornedStart": "MuiOutlinedInput-adornedStart",
                                            "colorSecondary": "MuiOutlinedInput-colorSecondary",
                                            "disabled": "Mui-disabled",
                                            "error": "Mui-error",
                                            "focused": "Mui-focused",
                                            "input": "MuiOutlinedInput-input",
                                            "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                                            "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                                            "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                                            "inputMultiline": "MuiOutlinedInput-inputMultiline",
                                            "marginDense": "MuiOutlinedInput-marginDense",
                                            "multiline": "MuiOutlinedInput-multiline",
                                            "notchedOutline": null,
                                            "root": "MuiOutlinedInput-root",
                                          }
                                        }
                                        fullWidth={true}
                                        inputComponent="input"
                                        inputProps={
                                          Object {
                                            "data-testid": "end-date-field",
                                          }
                                        }
                                        multiline={false}
                                        name="endDate"
                                        readOnly={true}
                                        renderSuffix={[Function]}
                                        type="text"
                                        value="November 22nd"
                                      >
                                        <ForwardRef(InputBase)
                                          autoFocus={false}
                                          classes={
                                            Object {
                                              "adornedEnd": "MuiInputBase-adornedEnd MuiOutlinedInput-adornedEnd",
                                              "adornedStart": "MuiInputBase-adornedStart MuiOutlinedInput-adornedStart",
                                              "colorSecondary": "MuiInputBase-colorSecondary MuiOutlinedInput-colorSecondary",
                                              "disabled": "Mui-disabled Mui-disabled",
                                              "error": "Mui-error Mui-error",
                                              "focused": "Mui-focused Mui-focused",
                                              "formControl": "MuiInputBase-formControl",
                                              "fullWidth": "MuiInputBase-fullWidth",
                                              "input": "MuiInputBase-input MuiOutlinedInput-input",
                                              "inputAdornedEnd": "MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd",
                                              "inputAdornedStart": "MuiInputBase-inputAdornedStart MuiOutlinedInput-inputAdornedStart",
                                              "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                              "inputMarginDense": "MuiInputBase-inputMarginDense MuiOutlinedInput-inputMarginDense",
                                              "inputMultiline": "MuiInputBase-inputMultiline MuiOutlinedInput-inputMultiline",
                                              "inputTypeSearch": "MuiInputBase-inputTypeSearch",
                                              "marginDense": "MuiInputBase-marginDense MuiOutlinedInput-marginDense",
                                              "multiline": "MuiInputBase-multiline MuiOutlinedInput-multiline",
                                              "root": "MuiInputBase-root MuiOutlinedInput-root",
                                            }
                                          }
                                          fullWidth={true}
                                          inputComponent="input"
                                          inputProps={
                                            Object {
                                              "data-testid": "end-date-field",
                                            }
                                          }
                                          multiline={false}
                                          name="endDate"
                                          readOnly={true}
                                          renderSuffix={[Function]}
                                          type="text"
                                          value="November 22nd"
                                        >
                                          <div
                                            className="MuiInputBase-root MuiOutlinedInput-root MuiInputBase-fullWidth MuiInputBase-formControl"
                                            onClick={[Function]}
                                          >
                                            <input
                                              aria-invalid={false}
                                              autoFocus={false}
                                              className="MuiInputBase-input MuiOutlinedInput-input"
                                              data-testid="end-date-field"
                                              disabled={false}
                                              name="endDate"
                                              onAnimationStart={[Function]}
                                              onBlur={[Function]}
                                              onChange={[Function]}
                                              onFocus={[Function]}
                                              readOnly={true}
                                              required={false}
                                              type="text"
                                              value="November 22nd"
                                            />
                                            <WithStyles(ForwardRef(NotchedOutline))
                                              className="MuiOutlinedInput-notchedOutline"
                                              labelWidth={0}
                                              notched={true}
                                            >
                                              <ForwardRef(NotchedOutline)
                                                className="MuiOutlinedInput-notchedOutline"
                                                classes={
                                                  Object {
                                                    "legend": "PrivateNotchedOutline-legend-2",
                                                    "legendLabelled": "PrivateNotchedOutline-legendLabelled-3",
                                                    "legendNotched": "PrivateNotchedOutline-legendNotched-4",
                                                    "root": "PrivateNotchedOutline-root-1",
                                                  }
                                                }
                                                labelWidth={0}
                                                notched={true}
                                              >
                                                <fieldset
                                                  aria-hidden={true}
                                                  className="PrivateNotchedOutline-root-1 MuiOutlinedInput-notchedOutline"
                                                  style={
                                                    Object {
                                                      "paddingLeft": 8,
                                                    }
                                                  }
                                                >
                                                  <legend
                                                    className="PrivateNotchedOutline-legend-2"
                                                    style={
                                                      Object {
                                                        "width": 0.01,
                                                      }
                                                    }
                                                  >
                                                    <span
                                                      dangerouslySetInnerHTML={
                                                        Object {
                                                          "__html": "&#8203;",
                                                        }
                                                      }
                                                    />
                                                  </legend>
                                                </fieldset>
                                              </ForwardRef(NotchedOutline)>
                                            </WithStyles(ForwardRef(NotchedOutline))>
                                          </div>
                                        </ForwardRef(InputBase)>
                                      </WithStyles(ForwardRef(InputBase))>
                                    </ForwardRef(OutlinedInput)>
                                  </WithStyles(ForwardRef(OutlinedInput))>
                                  <WithStyles(ForwardRef(FormHelperText))>
                                    <ForwardRef(FormHelperText)
                                      classes={
                                        Object {
                                          "contained": "MuiFormHelperText-contained",
                                          "disabled": "Mui-disabled",
                                          "error": "Mui-error",
                                          "filled": "MuiFormHelperText-filled",
                                          "focused": "Mui-focused",
                                          "marginDense": "MuiFormHelperText-marginDense",
                                          "required": "Mui-required",
                                          "root": "MuiFormHelperText-root",
                                        }
                                      }
                                    >
                                      <p
                                        className="MuiFormHelperText-root MuiFormHelperText-contained MuiFormHelperText-filled"
                                      >
                                        courses:editor.endDateLabel
                                      </p>
                                    </ForwardRef(FormHelperText)>
                                  </WithStyles(ForwardRef(FormHelperText))>
                                </div>
                              </ForwardRef(FormControl)>
                            </WithStyles(ForwardRef(FormControl))>
                          </ForwardRef(TextField)>
                        </WithStyles(ForwardRef(TextField))>
                      </PureDateInput>
                      <WithStyles(ModalDialog)
                        cancelLabel="Cancel"
                        clearLabel="Clear"
                        clearable={false}
                        okLabel="OK"
                        onAccept={[Function]}
                        onClear={[Function]}
                        onDismiss={[Function]}
                        onSetToday={[Function]}
                        open={false}
                        showTodayButton={false}
                        todayLabel="Today"
                      >
                        <ModalDialog
                          cancelLabel="Cancel"
                          classes={
                            Object {
                              "dialog": "MuiPickersModal-dialog",
                              "dialogRoot": "MuiPickersModal-dialogRoot",
                              "dialogRootWider": "MuiPickersModal-dialogRootWider",
                              "withAdditionalAction": "MuiPickersModal-withAdditionalAction",
                            }
                          }
                          clearLabel="Clear"
                          clearable={false}
                          okLabel="OK"
                          onAccept={[Function]}
                          onClear={[Function]}
                          onDismiss={[Function]}
                          onSetToday={[Function]}
                          open={false}
                          showTodayButton={false}
                          todayLabel="Today"
                        >
                          <WithStyles(ForwardRef(Dialog))
                            classes={
                              Object {
                                "paper": "MuiPickersModal-dialogRoot",
                              }
                            }
                            onClose={[Function]}
                            open={false}
                            role="dialog"
                          >
                            <ForwardRef(Dialog)
                              classes={
                                Object {
                                  "container": "MuiDialog-container",
                                  "paper": "MuiDialog-paper MuiPickersModal-dialogRoot",
                                  "paperFullScreen": "MuiDialog-paperFullScreen",
                                  "paperFullWidth": "MuiDialog-paperFullWidth",
                                  "paperScrollBody": "MuiDialog-paperScrollBody",
                                  "paperScrollPaper": "MuiDialog-paperScrollPaper",
                                  "paperWidthFalse": "MuiDialog-paperWidthFalse",
                                  "paperWidthLg": "MuiDialog-paperWidthLg",
                                  "paperWidthMd": "MuiDialog-paperWidthMd",
                                  "paperWidthSm": "MuiDialog-paperWidthSm",
                                  "paperWidthXl": "MuiDialog-paperWidthXl",
                                  "paperWidthXs": "MuiDialog-paperWidthXs",
                                  "root": "MuiDialog-root",
                                  "scrollBody": "MuiDialog-scrollBody",
                                  "scrollPaper": "MuiDialog-scrollPaper",
                                }
                              }
                              onClose={[Function]}
                              open={false}
                              role="dialog"
                            >
                              <ForwardRef(Modal)
                                BackdropComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "Naked": Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "propTypes": Object {
                                        "children": [Function],
                                        "className": [Function],
                                        "classes": [Function],
                                        "invisible": [Function],
                                        "open": [Function],
                                        "transitionDuration": [Function],
                                      },
                                      "render": [Function],
                                    },
                                    "options": Object {
                                      "defaultTheme": Object {
                                        "breakpoints": Object {
                                          "between": [Function],
                                          "down": [Function],
                                          "keys": Array [
                                            "xs",
                                            "sm",
                                            "md",
                                            "lg",
                                            "xl",
                                          ],
                                          "only": [Function],
                                          "up": [Function],
                                          "values": Object {
                                            "lg": 1280,
                                            "md": 960,
                                            "sm": 600,
                                            "xl": 1920,
                                            "xs": 0,
                                          },
                                          "width": [Function],
                                        },
                                        "direction": "ltr",
                                        "mixins": Object {
                                          "gutters": [Function],
                                          "toolbar": Object {
                                            "@media (min-width:0px) and (orientation: landscape)": Object {
                                              "minHeight": 48,
                                            },
                                            "@media (min-width:600px)": Object {
                                              "minHeight": 64,
                                            },
                                            "minHeight": 56,
                                          },
                                        },
                                        "overrides": Object {},
                                        "palette": Object {
                                          "action": Object {
                                            "activatedOpacity": 0.12,
                                            "active": "rgba(0, 0, 0, 0.54)",
                                            "disabled": "rgba(0, 0, 0, 0.26)",
                                            "disabledBackground": "rgba(0, 0, 0, 0.12)",
                                            "disabledOpacity": 0.38,
                                            "focus": "rgba(0, 0, 0, 0.12)",
                                            "focusOpacity": 0.12,
                                            "hover": "rgba(0, 0, 0, 0.04)",
                                            "hoverOpacity": 0.04,
                                            "selected": "rgba(0, 0, 0, 0.08)",
                                            "selectedOpacity": 0.08,
                                          },
                                          "augmentColor": [Function],
                                          "background": Object {
                                            "default": "#fafafa",
                                            "paper": "#fff",
                                          },
                                          "common": Object {
                                            "black": "#000",
                                            "white": "#fff",
                                          },
                                          "contrastThreshold": 3,
                                          "divider": "rgba(0, 0, 0, 0.12)",
                                          "error": Object {
                                            "contrastText": "#fff",
                                            "dark": "#d32f2f",
                                            "light": "#e57373",
                                            "main": "#f44336",
                                          },
                                          "getContrastText": [Function],
                                          "grey": Object {
                                            "100": "#f5f5f5",
                                            "200": "#eeeeee",
                                            "300": "#e0e0e0",
                                            "400": "#bdbdbd",
                                            "50": "#fafafa",
                                            "500": "#9e9e9e",
                                            "600": "#757575",
                                            "700": "#616161",
                                            "800": "#424242",
                                            "900": "#212121",
                                            "A100": "#d5d5d5",
                                            "A200": "#aaaaaa",
                                            "A400": "#303030",
                                            "A700": "#616161",
                                          },
                                          "info": Object {
                                            "contrastText": "#fff",
                                            "dark": "#1976d2",
                                            "light": "#64b5f6",
                                            "main": "#2196f3",
                                          },
                                          "primary": Object {
                                            "contrastText": "#fff",
                                            "dark": "#303f9f",
                                            "light": "#7986cb",
                                            "main": "#3f51b5",
                                          },
                                          "secondary": Object {
                                            "contrastText": "#fff",
                                            "dark": "#c51162",
                                            "light": "#ff4081",
                                            "main": "#f50057",
                                          },
                                          "success": Object {
                                            "contrastText": "rgba(0, 0, 0, 0.87)",
                                            "dark": "#388e3c",
                                            "light": "#81c784",
                                            "main": "#4caf50",
                                          },
                                          "text": Object {
                                            "disabled": "rgba(0, 0, 0, 0.38)",
                                            "hint": "rgba(0, 0, 0, 0.38)",
                                            "primary": "rgba(0, 0, 0, 0.87)",
                                            "secondary": "rgba(0, 0, 0, 0.54)",
                                          },
                                          "tonalOffset": 0.2,
                                          "type": "light",
                                          "warning": Object {
                                            "contrastText": "rgba(0, 0, 0, 0.87)",
                                            "dark": "#f57c00",
                                            "light": "#ffb74d",
                                            "main": "#ff9800",
                                          },
                                        },
                                        "props": Object {},
                                        "shadows": Array [
                                          "none",
                                          "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
                                          "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
                                          "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
                                          "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
                                          "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
                                          "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
                                          "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
                                          "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
                                          "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
                                          "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
                                          "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
                                          "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
                                          "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
                                          "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
                                          "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
                                          "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
                                          "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
                                          "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
                                          "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
                                          "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
                                          "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
                                          "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
                                          "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
                                          "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
                                        ],
                                        "shape": Object {
                                          "borderRadius": 4,
                                        },
                                        "spacing": [Function],
                                        "transitions": Object {
                                          "create": [Function],
                                          "duration": Object {
                                            "complex": 375,
                                            "enteringScreen": 225,
                                            "leavingScreen": 195,
                                            "short": 250,
                                            "shorter": 200,
                                            "shortest": 150,
                                            "standard": 300,
                                          },
                                          "easing": Object {
                                            "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                                            "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                                            "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                                            "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
                                          },
                                          "getAutoHeightDuration": [Function],
                                        },
                                        "typography": Object {
                                          "body1": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "1rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0.00938em",
                                            "lineHeight": 1.5,
                                          },
                                          "body2": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "0.875rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0.01071em",
                                            "lineHeight": 1.43,
                                          },
                                          "button": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "0.875rem",
                                            "fontWeight": 500,
                                            "letterSpacing": "0.02857em",
                                            "lineHeight": 1.75,
                                            "textTransform": "uppercase",
                                          },
                                          "caption": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "0.75rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0.03333em",
                                            "lineHeight": 1.66,
                                          },
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": 14,
                                          "fontWeightBold": 700,
                                          "fontWeightLight": 300,
                                          "fontWeightMedium": 500,
                                          "fontWeightRegular": 400,
                                          "h1": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "6rem",
                                            "fontWeight": 300,
                                            "letterSpacing": "-0.01562em",
                                            "lineHeight": 1.167,
                                          },
                                          "h2": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "3.75rem",
                                            "fontWeight": 300,
                                            "letterSpacing": "-0.00833em",
                                            "lineHeight": 1.2,
                                          },
                                          "h3": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "3rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0em",
                                            "lineHeight": 1.167,
                                          },
                                          "h4": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "2.125rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0.00735em",
                                            "lineHeight": 1.235,
                                          },
                                          "h5": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "1.5rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0em",
                                            "lineHeight": 1.334,
                                          },
                                          "h6": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "1.25rem",
                                            "fontWeight": 500,
                                            "letterSpacing": "0.0075em",
                                            "lineHeight": 1.6,
                                          },
                                          "htmlFontSize": 16,
                                          "overline": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "0.75rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0.08333em",
                                            "lineHeight": 2.66,
                                            "textTransform": "uppercase",
                                          },
                                          "pxToRem": [Function],
                                          "round": [Function],
                                          "subtitle1": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "1rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0.00938em",
                                            "lineHeight": 1.75,
                                          },
                                          "subtitle2": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "0.875rem",
                                            "fontWeight": 500,
                                            "letterSpacing": "0.00714em",
                                            "lineHeight": 1.57,
                                          },
                                        },
                                        "zIndex": Object {
                                          "appBar": 1100,
                                          "drawer": 1200,
                                          "mobileStepper": 1000,
                                          "modal": 1300,
                                          "snackbar": 1400,
                                          "speedDial": 1050,
                                          "tooltip": 1500,
                                        },
                                      },
                                      "name": "MuiBackdrop",
                                    },
                                    "propTypes": Object {
                                      "classes": [Function],
                                      "innerRef": [Function],
                                    },
                                    "render": [Function],
                                    "useStyles": [Function],
                                  }
                                }
                                BackdropProps={
                                  Object {
                                    "transitionDuration": Object {
                                      "enter": 225,
                                      "exit": 195,
                                    },
                                  }
                                }
                                className="MuiDialog-root"
                                closeAfterTransition={true}
                                disableBackdropClick={false}
                                disableEscapeKeyDown={false}
                                onClose={[Function]}
                                open={false}
                                role="dialog"
                              />
                            </ForwardRef(Dialog)>
                          </WithStyles(ForwardRef(Dialog))>
                        </ModalDialog>
                      </WithStyles(ModalDialog)>
                    </ModalWrapper>
                  </Wrapper>
                </PickerWithState>
                <PickerWithState
                  ampm={true}
                  className="timepicker"
                  fullWidth={true}
                  helperText="courses:editor.endTimeLabel"
                  inputProps={
                    Object {
                      "data-testid": "end-time-field",
                    }
                  }
                  inputVariant="outlined"
                  invalidDateMessage="Invalid Time Format"
                  name="endTime"
                  onChange={[Function]}
                  openTo="hours"
                  value={2000-11-22T00:00:00.000Z}
                  views={
                    Array [
                      "hours",
                      "minutes",
                    ]
                  }
                >
                  <Wrapper
                    DateInputProps={
                      Object {
                        "inputValue": "02:00 AM",
                        "openPicker": [Function],
                        "validationError": "",
                      }
                    }
                    InputComponent={[Function]}
                    className="timepicker"
                    format="hh:mm a"
                    fullWidth={true}
                    helperText="courses:editor.endTimeLabel"
                    inputProps={
                      Object {
                        "data-testid": "end-time-field",
                      }
                    }
                    inputVariant="outlined"
                    name="endTime"
                    onAccept={[Function]}
                    onClear={[Function]}
                    onDismiss={[Function]}
                    onSetToday={[Function]}
                    open={false}
                  >
                    <ModalWrapper
                      DateInputProps={
                        Object {
                          "inputValue": "02:00 AM",
                          "openPicker": [Function],
                          "validationError": "",
                        }
                      }
                      InputComponent={[Function]}
                      cancelLabel="Cancel"
                      className="timepicker"
                      clearLabel="Clear"
                      clearable={false}
                      format="hh:mm a"
                      fullWidth={true}
                      helperText="courses:editor.endTimeLabel"
                      inputProps={
                        Object {
                          "data-testid": "end-time-field",
                        }
                      }
                      inputVariant="outlined"
                      name="endTime"
                      okLabel="OK"
                      onAccept={[Function]}
                      onClear={[Function]}
                      onDismiss={[Function]}
                      onSetToday={[Function]}
                      open={false}
                      showTodayButton={false}
                      todayLabel="Today"
                    >
                      <PureDateInput
                        className="timepicker"
                        format="hh:mm a"
                        fullWidth={true}
                        helperText="courses:editor.endTimeLabel"
                        inputProps={
                          Object {
                            "data-testid": "end-time-field",
                          }
                        }
                        inputValue="02:00 AM"
                        inputVariant="outlined"
                        name="endTime"
                        openPicker={[Function]}
                        validationError=""
                      >
                        <WithStyles(ForwardRef(TextField))
                          InputProps={
                            Object {
                              "readOnly": true,
                            }
                          }
                          className="timepicker"
                          error={false}
                          format="hh:mm a"
                          fullWidth={true}
                          helperText="courses:editor.endTimeLabel"
                          inputProps={
                            Object {
                              "data-testid": "end-time-field",
                            }
                          }
                          name="endTime"
                          onClick={[Function]}
                          onKeyDown={[Function]}
                          value="02:00 AM"
                          variant="outlined"
                        >
                          <ForwardRef(TextField)
                            InputProps={
                              Object {
                                "readOnly": true,
                              }
                            }
                            className="timepicker"
                            classes={
                              Object {
                                "root": "MuiTextField-root",
                              }
                            }
                            error={false}
                            format="hh:mm a"
                            fullWidth={true}
                            helperText="courses:editor.endTimeLabel"
                            inputProps={
                              Object {
                                "data-testid": "end-time-field",
                              }
                            }
                            name="endTime"
                            onClick={[Function]}
                            onKeyDown={[Function]}
                            value="02:00 AM"
                            variant="outlined"
                          >
                            <WithStyles(ForwardRef(FormControl))
                              className="MuiTextField-root timepicker"
                              color="primary"
                              disabled={false}
                              error={false}
                              format="hh:mm a"
                              fullWidth={true}
                              onClick={[Function]}
                              onKeyDown={[Function]}
                              required={false}
                              variant="outlined"
                            >
                              <ForwardRef(FormControl)
                                className="MuiTextField-root timepicker"
                                classes={
                                  Object {
                                    "fullWidth": "MuiFormControl-fullWidth",
                                    "marginDense": "MuiFormControl-marginDense",
                                    "marginNormal": "MuiFormControl-marginNormal",
                                    "root": "MuiFormControl-root",
                                  }
                                }
                                color="primary"
                                disabled={false}
                                error={false}
                                format="hh:mm a"
                                fullWidth={true}
                                onClick={[Function]}
                                onKeyDown={[Function]}
                                required={false}
                                variant="outlined"
                              >
                                <div
                                  className="MuiFormControl-root MuiTextField-root timepicker MuiFormControl-fullWidth"
                                  format="hh:mm a"
                                  onClick={[Function]}
                                  onKeyDown={[Function]}
                                >
                                  <WithStyles(ForwardRef(OutlinedInput))
                                    autoFocus={false}
                                    fullWidth={true}
                                    inputProps={
                                      Object {
                                        "data-testid": "end-time-field",
                                      }
                                    }
                                    multiline={false}
                                    name="endTime"
                                    readOnly={true}
                                    value="02:00 AM"
                                  >
                                    <ForwardRef(OutlinedInput)
                                      autoFocus={false}
                                      classes={
                                        Object {
                                          "adornedEnd": "MuiOutlinedInput-adornedEnd",
                                          "adornedStart": "MuiOutlinedInput-adornedStart",
                                          "colorSecondary": "MuiOutlinedInput-colorSecondary",
                                          "disabled": "Mui-disabled",
                                          "error": "Mui-error",
                                          "focused": "Mui-focused",
                                          "input": "MuiOutlinedInput-input",
                                          "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                                          "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                                          "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                                          "inputMultiline": "MuiOutlinedInput-inputMultiline",
                                          "marginDense": "MuiOutlinedInput-marginDense",
                                          "multiline": "MuiOutlinedInput-multiline",
                                          "notchedOutline": "MuiOutlinedInput-notchedOutline",
                                          "root": "MuiOutlinedInput-root",
                                        }
                                      }
                                      fullWidth={true}
                                      inputProps={
                                        Object {
                                          "data-testid": "end-time-field",
                                        }
                                      }
                                      multiline={false}
                                      name="endTime"
                                      readOnly={true}
                                      value="02:00 AM"
                                    >
                                      <WithStyles(ForwardRef(InputBase))
                                        autoFocus={false}
                                        classes={
                                          Object {
                                            "adornedEnd": "MuiOutlinedInput-adornedEnd",
                                            "adornedStart": "MuiOutlinedInput-adornedStart",
                                            "colorSecondary": "MuiOutlinedInput-colorSecondary",
                                            "disabled": "Mui-disabled",
                                            "error": "Mui-error",
                                            "focused": "Mui-focused",
                                            "input": "MuiOutlinedInput-input",
                                            "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                                            "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                                            "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                                            "inputMultiline": "MuiOutlinedInput-inputMultiline",
                                            "marginDense": "MuiOutlinedInput-marginDense",
                                            "multiline": "MuiOutlinedInput-multiline",
                                            "notchedOutline": null,
                                            "root": "MuiOutlinedInput-root",
                                          }
                                        }
                                        fullWidth={true}
                                        inputComponent="input"
                                        inputProps={
                                          Object {
                                            "data-testid": "end-time-field",
                                          }
                                        }
                                        multiline={false}
                                        name="endTime"
                                        readOnly={true}
                                        renderSuffix={[Function]}
                                        type="text"
                                        value="02:00 AM"
                                      >
                                        <ForwardRef(InputBase)
                                          autoFocus={false}
                                          classes={
                                            Object {
                                              "adornedEnd": "MuiInputBase-adornedEnd MuiOutlinedInput-adornedEnd",
                                              "adornedStart": "MuiInputBase-adornedStart MuiOutlinedInput-adornedStart",
                                              "colorSecondary": "MuiInputBase-colorSecondary MuiOutlinedInput-colorSecondary",
                                              "disabled": "Mui-disabled Mui-disabled",
                                              "error": "Mui-error Mui-error",
                                              "focused": "Mui-focused Mui-focused",
                                              "formControl": "MuiInputBase-formControl",
                                              "fullWidth": "MuiInputBase-fullWidth",
                                              "input": "MuiInputBase-input MuiOutlinedInput-input",
                                              "inputAdornedEnd": "MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd",
                                              "inputAdornedStart": "MuiInputBase-inputAdornedStart MuiOutlinedInput-inputAdornedStart",
                                              "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                              "inputMarginDense": "MuiInputBase-inputMarginDense MuiOutlinedInput-inputMarginDense",
                                              "inputMultiline": "MuiInputBase-inputMultiline MuiOutlinedInput-inputMultiline",
                                              "inputTypeSearch": "MuiInputBase-inputTypeSearch",
                                              "marginDense": "MuiInputBase-marginDense MuiOutlinedInput-marginDense",
                                              "multiline": "MuiInputBase-multiline MuiOutlinedInput-multiline",
                                              "root": "MuiInputBase-root MuiOutlinedInput-root",
                                            }
                                          }
                                          fullWidth={true}
                                          inputComponent="input"
                                          inputProps={
                                            Object {
                                              "data-testid": "end-time-field",
                                            }
                                          }
                                          multiline={false}
                                          name="endTime"
                                          readOnly={true}
                                          renderSuffix={[Function]}
                                          type="text"
                                          value="02:00 AM"
                                        >
                                          <div
                                            className="MuiInputBase-root MuiOutlinedInput-root MuiInputBase-fullWidth MuiInputBase-formControl"
                                            onClick={[Function]}
                                          >
                                            <input
                                              aria-invalid={false}
                                              autoFocus={false}
                                              className="MuiInputBase-input MuiOutlinedInput-input"
                                              data-testid="end-time-field"
                                              disabled={false}
                                              name="endTime"
                                              onAnimationStart={[Function]}
                                              onBlur={[Function]}
                                              onChange={[Function]}
                                              onFocus={[Function]}
                                              readOnly={true}
                                              required={false}
                                              type="text"
                                              value="02:00 AM"
                                            />
                                            <WithStyles(ForwardRef(NotchedOutline))
                                              className="MuiOutlinedInput-notchedOutline"
                                              labelWidth={0}
                                              notched={true}
                                            >
                                              <ForwardRef(NotchedOutline)
                                                className="MuiOutlinedInput-notchedOutline"
                                                classes={
                                                  Object {
                                                    "legend": "PrivateNotchedOutline-legend-2",
                                                    "legendLabelled": "PrivateNotchedOutline-legendLabelled-3",
                                                    "legendNotched": "PrivateNotchedOutline-legendNotched-4",
                                                    "root": "PrivateNotchedOutline-root-1",
                                                  }
                                                }
                                                labelWidth={0}
                                                notched={true}
                                              >
                                                <fieldset
                                                  aria-hidden={true}
                                                  className="PrivateNotchedOutline-root-1 MuiOutlinedInput-notchedOutline"
                                                  style={
                                                    Object {
                                                      "paddingLeft": 8,
                                                    }
                                                  }
                                                >
                                                  <legend
                                                    className="PrivateNotchedOutline-legend-2"
                                                    style={
                                                      Object {
                                                        "width": 0.01,
                                                      }
                                                    }
                                                  >
                                                    <span
                                                      dangerouslySetInnerHTML={
                                                        Object {
                                                          "__html": "&#8203;",
                                                        }
                                                      }
                                                    />
                                                  </legend>
                                                </fieldset>
                                              </ForwardRef(NotchedOutline)>
                                            </WithStyles(ForwardRef(NotchedOutline))>
                                          </div>
                                        </ForwardRef(InputBase)>
                                      </WithStyles(ForwardRef(InputBase))>
                                    </ForwardRef(OutlinedInput)>
                                  </WithStyles(ForwardRef(OutlinedInput))>
                                  <WithStyles(ForwardRef(FormHelperText))>
                                    <ForwardRef(FormHelperText)
                                      classes={
                                        Object {
                                          "contained": "MuiFormHelperText-contained",
                                          "disabled": "Mui-disabled",
                                          "error": "Mui-error",
                                          "filled": "MuiFormHelperText-filled",
                                          "focused": "Mui-focused",
                                          "marginDense": "MuiFormHelperText-marginDense",
                                          "required": "Mui-required",
                                          "root": "MuiFormHelperText-root",
                                        }
                                      }
                                    >
                                      <p
                                        className="MuiFormHelperText-root MuiFormHelperText-contained MuiFormHelperText-filled"
                                      >
                                        courses:editor.endTimeLabel
                                      </p>
                                    </ForwardRef(FormHelperText)>
                                  </WithStyles(ForwardRef(FormHelperText))>
                                </div>
                              </ForwardRef(FormControl)>
                            </WithStyles(ForwardRef(FormControl))>
                          </ForwardRef(TextField)>
                        </WithStyles(ForwardRef(TextField))>
                      </PureDateInput>
                      <WithStyles(ModalDialog)
                        cancelLabel="Cancel"
                        clearLabel="Clear"
                        clearable={false}
                        okLabel="OK"
                        onAccept={[Function]}
                        onClear={[Function]}
                        onDismiss={[Function]}
                        onSetToday={[Function]}
                        open={false}
                        showTodayButton={false}
                        todayLabel="Today"
                      >
                        <ModalDialog
                          cancelLabel="Cancel"
                          classes={
                            Object {
                              "dialog": "MuiPickersModal-dialog",
                              "dialogRoot": "MuiPickersModal-dialogRoot",
                              "dialogRootWider": "MuiPickersModal-dialogRootWider",
                              "withAdditionalAction": "MuiPickersModal-withAdditionalAction",
                            }
                          }
                          clearLabel="Clear"
                          clearable={false}
                          okLabel="OK"
                          onAccept={[Function]}
                          onClear={[Function]}
                          onDismiss={[Function]}
                          onSetToday={[Function]}
                          open={false}
                          showTodayButton={false}
                          todayLabel="Today"
                        >
                          <WithStyles(ForwardRef(Dialog))
                            classes={
                              Object {
                                "paper": "MuiPickersModal-dialogRoot",
                              }
                            }
                            onClose={[Function]}
                            open={false}
                            role="dialog"
                          >
                            <ForwardRef(Dialog)
                              classes={
                                Object {
                                  "container": "MuiDialog-container",
                                  "paper": "MuiDialog-paper MuiPickersModal-dialogRoot",
                                  "paperFullScreen": "MuiDialog-paperFullScreen",
                                  "paperFullWidth": "MuiDialog-paperFullWidth",
                                  "paperScrollBody": "MuiDialog-paperScrollBody",
                                  "paperScrollPaper": "MuiDialog-paperScrollPaper",
                                  "paperWidthFalse": "MuiDialog-paperWidthFalse",
                                  "paperWidthLg": "MuiDialog-paperWidthLg",
                                  "paperWidthMd": "MuiDialog-paperWidthMd",
                                  "paperWidthSm": "MuiDialog-paperWidthSm",
                                  "paperWidthXl": "MuiDialog-paperWidthXl",
                                  "paperWidthXs": "MuiDialog-paperWidthXs",
                                  "root": "MuiDialog-root",
                                  "scrollBody": "MuiDialog-scrollBody",
                                  "scrollPaper": "MuiDialog-scrollPaper",
                                }
                              }
                              onClose={[Function]}
                              open={false}
                              role="dialog"
                            >
                              <ForwardRef(Modal)
                                BackdropComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "Naked": Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "propTypes": Object {
                                        "children": [Function],
                                        "className": [Function],
                                        "classes": [Function],
                                        "invisible": [Function],
                                        "open": [Function],
                                        "transitionDuration": [Function],
                                      },
                                      "render": [Function],
                                    },
                                    "options": Object {
                                      "defaultTheme": Object {
                                        "breakpoints": Object {
                                          "between": [Function],
                                          "down": [Function],
                                          "keys": Array [
                                            "xs",
                                            "sm",
                                            "md",
                                            "lg",
                                            "xl",
                                          ],
                                          "only": [Function],
                                          "up": [Function],
                                          "values": Object {
                                            "lg": 1280,
                                            "md": 960,
                                            "sm": 600,
                                            "xl": 1920,
                                            "xs": 0,
                                          },
                                          "width": [Function],
                                        },
                                        "direction": "ltr",
                                        "mixins": Object {
                                          "gutters": [Function],
                                          "toolbar": Object {
                                            "@media (min-width:0px) and (orientation: landscape)": Object {
                                              "minHeight": 48,
                                            },
                                            "@media (min-width:600px)": Object {
                                              "minHeight": 64,
                                            },
                                            "minHeight": 56,
                                          },
                                        },
                                        "overrides": Object {},
                                        "palette": Object {
                                          "action": Object {
                                            "activatedOpacity": 0.12,
                                            "active": "rgba(0, 0, 0, 0.54)",
                                            "disabled": "rgba(0, 0, 0, 0.26)",
                                            "disabledBackground": "rgba(0, 0, 0, 0.12)",
                                            "disabledOpacity": 0.38,
                                            "focus": "rgba(0, 0, 0, 0.12)",
                                            "focusOpacity": 0.12,
                                            "hover": "rgba(0, 0, 0, 0.04)",
                                            "hoverOpacity": 0.04,
                                            "selected": "rgba(0, 0, 0, 0.08)",
                                            "selectedOpacity": 0.08,
                                          },
                                          "augmentColor": [Function],
                                          "background": Object {
                                            "default": "#fafafa",
                                            "paper": "#fff",
                                          },
                                          "common": Object {
                                            "black": "#000",
                                            "white": "#fff",
                                          },
                                          "contrastThreshold": 3,
                                          "divider": "rgba(0, 0, 0, 0.12)",
                                          "error": Object {
                                            "contrastText": "#fff",
                                            "dark": "#d32f2f",
                                            "light": "#e57373",
                                            "main": "#f44336",
                                          },
                                          "getContrastText": [Function],
                                          "grey": Object {
                                            "100": "#f5f5f5",
                                            "200": "#eeeeee",
                                            "300": "#e0e0e0",
                                            "400": "#bdbdbd",
                                            "50": "#fafafa",
                                            "500": "#9e9e9e",
                                            "600": "#757575",
                                            "700": "#616161",
                                            "800": "#424242",
                                            "900": "#212121",
                                            "A100": "#d5d5d5",
                                            "A200": "#aaaaaa",
                                            "A400": "#303030",
                                            "A700": "#616161",
                                          },
                                          "info": Object {
                                            "contrastText": "#fff",
                                            "dark": "#1976d2",
                                            "light": "#64b5f6",
                                            "main": "#2196f3",
                                          },
                                          "primary": Object {
                                            "contrastText": "#fff",
                                            "dark": "#303f9f",
                                            "light": "#7986cb",
                                            "main": "#3f51b5",
                                          },
                                          "secondary": Object {
                                            "contrastText": "#fff",
                                            "dark": "#c51162",
                                            "light": "#ff4081",
                                            "main": "#f50057",
                                          },
                                          "success": Object {
                                            "contrastText": "rgba(0, 0, 0, 0.87)",
                                            "dark": "#388e3c",
                                            "light": "#81c784",
                                            "main": "#4caf50",
                                          },
                                          "text": Object {
                                            "disabled": "rgba(0, 0, 0, 0.38)",
                                            "hint": "rgba(0, 0, 0, 0.38)",
                                            "primary": "rgba(0, 0, 0, 0.87)",
                                            "secondary": "rgba(0, 0, 0, 0.54)",
                                          },
                                          "tonalOffset": 0.2,
                                          "type": "light",
                                          "warning": Object {
                                            "contrastText": "rgba(0, 0, 0, 0.87)",
                                            "dark": "#f57c00",
                                            "light": "#ffb74d",
                                            "main": "#ff9800",
                                          },
                                        },
                                        "props": Object {},
                                        "shadows": Array [
                                          "none",
                                          "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
                                          "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
                                          "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
                                          "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
                                          "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
                                          "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
                                          "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
                                          "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
                                          "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
                                          "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
                                          "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
                                          "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
                                          "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
                                          "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
                                          "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
                                          "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
                                          "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
                                          "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
                                          "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
                                          "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
                                          "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
                                          "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
                                          "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
                                          "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
                                        ],
                                        "shape": Object {
                                          "borderRadius": 4,
                                        },
                                        "spacing": [Function],
                                        "transitions": Object {
                                          "create": [Function],
                                          "duration": Object {
                                            "complex": 375,
                                            "enteringScreen": 225,
                                            "leavingScreen": 195,
                                            "short": 250,
                                            "shorter": 200,
                                            "shortest": 150,
                                            "standard": 300,
                                          },
                                          "easing": Object {
                                            "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                                            "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                                            "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                                            "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
                                          },
                                          "getAutoHeightDuration": [Function],
                                        },
                                        "typography": Object {
                                          "body1": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "1rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0.00938em",
                                            "lineHeight": 1.5,
                                          },
                                          "body2": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "0.875rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0.01071em",
                                            "lineHeight": 1.43,
                                          },
                                          "button": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "0.875rem",
                                            "fontWeight": 500,
                                            "letterSpacing": "0.02857em",
                                            "lineHeight": 1.75,
                                            "textTransform": "uppercase",
                                          },
                                          "caption": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "0.75rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0.03333em",
                                            "lineHeight": 1.66,
                                          },
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": 14,
                                          "fontWeightBold": 700,
                                          "fontWeightLight": 300,
                                          "fontWeightMedium": 500,
                                          "fontWeightRegular": 400,
                                          "h1": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "6rem",
                                            "fontWeight": 300,
                                            "letterSpacing": "-0.01562em",
                                            "lineHeight": 1.167,
                                          },
                                          "h2": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "3.75rem",
                                            "fontWeight": 300,
                                            "letterSpacing": "-0.00833em",
                                            "lineHeight": 1.2,
                                          },
                                          "h3": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "3rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0em",
                                            "lineHeight": 1.167,
                                          },
                                          "h4": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "2.125rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0.00735em",
                                            "lineHeight": 1.235,
                                          },
                                          "h5": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "1.5rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0em",
                                            "lineHeight": 1.334,
                                          },
                                          "h6": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "1.25rem",
                                            "fontWeight": 500,
                                            "letterSpacing": "0.0075em",
                                            "lineHeight": 1.6,
                                          },
                                          "htmlFontSize": 16,
                                          "overline": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "0.75rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0.08333em",
                                            "lineHeight": 2.66,
                                            "textTransform": "uppercase",
                                          },
                                          "pxToRem": [Function],
                                          "round": [Function],
                                          "subtitle1": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "1rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0.00938em",
                                            "lineHeight": 1.75,
                                          },
                                          "subtitle2": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "0.875rem",
                                            "fontWeight": 500,
                                            "letterSpacing": "0.00714em",
                                            "lineHeight": 1.57,
                                          },
                                        },
                                        "zIndex": Object {
                                          "appBar": 1100,
                                          "drawer": 1200,
                                          "mobileStepper": 1000,
                                          "modal": 1300,
                                          "snackbar": 1400,
                                          "speedDial": 1050,
                                          "tooltip": 1500,
                                        },
                                      },
                                      "name": "MuiBackdrop",
                                    },
                                    "propTypes": Object {
                                      "classes": [Function],
                                      "innerRef": [Function],
                                    },
                                    "render": [Function],
                                    "useStyles": [Function],
                                  }
                                }
                                BackdropProps={
                                  Object {
                                    "transitionDuration": Object {
                                      "enter": 225,
                                      "exit": 195,
                                    },
                                  }
                                }
                                className="MuiDialog-root"
                                closeAfterTransition={true}
                                disableBackdropClick={false}
                                disableEscapeKeyDown={false}
                                onClose={[Function]}
                                open={false}
                                role="dialog"
                              />
                            </ForwardRef(Dialog)>
                          </WithStyles(ForwardRef(Dialog))>
                        </ModalDialog>
                      </WithStyles(ModalDialog)>
                    </ModalWrapper>
                  </Wrapper>
                </PickerWithState>
              </div>
              <div>
                <WithStyles(ForwardRef(TextField))
                  fullWidth={true}
                  helperText="courses:editor.descriptionHelperText"
                  inputProps={
                    Object {
                      "data-testid": "description-field",
                    }
                  }
                  label="courses:editor.descriptionLabel"
                  multiline={true}
                  name="description"
                  onChange={[Function]}
                  rows={4}
                  value=""
                  variant="outlined"
                >
                  <ForwardRef(TextField)
                    classes={
                      Object {
                        "root": "MuiTextField-root",
                      }
                    }
                    fullWidth={true}
                    helperText="courses:editor.descriptionHelperText"
                    inputProps={
                      Object {
                        "data-testid": "description-field",
                      }
                    }
                    label="courses:editor.descriptionLabel"
                    multiline={true}
                    name="description"
                    onChange={[Function]}
                    rows={4}
                    value=""
                    variant="outlined"
                  >
                    <WithStyles(ForwardRef(FormControl))
                      className="MuiTextField-root"
                      color="primary"
                      disabled={false}
                      error={false}
                      fullWidth={true}
                      required={false}
                      variant="outlined"
                    >
                      <ForwardRef(FormControl)
                        className="MuiTextField-root"
                        classes={
                          Object {
                            "fullWidth": "MuiFormControl-fullWidth",
                            "marginDense": "MuiFormControl-marginDense",
                            "marginNormal": "MuiFormControl-marginNormal",
                            "root": "MuiFormControl-root",
                          }
                        }
                        color="primary"
                        disabled={false}
                        error={false}
                        fullWidth={true}
                        required={false}
                        variant="outlined"
                      >
                        <div
                          className="MuiFormControl-root MuiTextField-root MuiFormControl-fullWidth"
                        >
                          <WithStyles(ForwardRef(InputLabel))>
                            <ForwardRef(InputLabel)
                              classes={
                                Object {
                                  "animated": "MuiInputLabel-animated",
                                  "asterisk": "MuiInputLabel-asterisk",
                                  "disabled": "Mui-disabled",
                                  "error": "Mui-error",
                                  "filled": "MuiInputLabel-filled",
                                  "focused": "Mui-focused",
                                  "formControl": "MuiInputLabel-formControl",
                                  "marginDense": "MuiInputLabel-marginDense",
                                  "outlined": "MuiInputLabel-outlined",
                                  "required": "Mui-required",
                                  "root": "MuiInputLabel-root",
                                  "shrink": "MuiInputLabel-shrink",
                                }
                              }
                            >
                              <WithStyles(ForwardRef(FormLabel))
                                className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-outlined"
                                classes={
                                  Object {
                                    "asterisk": "MuiInputLabel-asterisk",
                                    "disabled": "Mui-disabled",
                                    "error": "Mui-error",
                                    "focused": "Mui-focused",
                                    "required": "Mui-required",
                                  }
                                }
                                data-shrink={false}
                              >
                                <ForwardRef(FormLabel)
                                  className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-outlined"
                                  classes={
                                    Object {
                                      "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                                      "colorSecondary": "MuiFormLabel-colorSecondary",
                                      "disabled": "Mui-disabled Mui-disabled",
                                      "error": "Mui-error Mui-error",
                                      "filled": "MuiFormLabel-filled",
                                      "focused": "Mui-focused Mui-focused",
                                      "required": "Mui-required Mui-required",
                                      "root": "MuiFormLabel-root",
                                    }
                                  }
                                  data-shrink={false}
                                >
                                  <label
                                    className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-outlined"
                                    data-shrink={false}
                                  >
                                    courses:editor.descriptionLabel
                                  </label>
                                </ForwardRef(FormLabel)>
                              </WithStyles(ForwardRef(FormLabel))>
                            </ForwardRef(InputLabel)>
                          </WithStyles(ForwardRef(InputLabel))>
                          <WithStyles(ForwardRef(OutlinedInput))
                            autoFocus={false}
                            fullWidth={true}
                            inputProps={
                              Object {
                                "data-testid": "description-field",
                              }
                            }
                            label={
                              <React.Fragment>
                                courses:editor.descriptionLabel
                              </React.Fragment>
                            }
                            multiline={true}
                            name="description"
                            onChange={[Function]}
                            rows={4}
                            value=""
                          >
                            <ForwardRef(OutlinedInput)
                              autoFocus={false}
                              classes={
                                Object {
                                  "adornedEnd": "MuiOutlinedInput-adornedEnd",
                                  "adornedStart": "MuiOutlinedInput-adornedStart",
                                  "colorSecondary": "MuiOutlinedInput-colorSecondary",
                                  "disabled": "Mui-disabled",
                                  "error": "Mui-error",
                                  "focused": "Mui-focused",
                                  "input": "MuiOutlinedInput-input",
                                  "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                                  "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                                  "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                                  "inputMultiline": "MuiOutlinedInput-inputMultiline",
                                  "marginDense": "MuiOutlinedInput-marginDense",
                                  "multiline": "MuiOutlinedInput-multiline",
                                  "notchedOutline": "MuiOutlinedInput-notchedOutline",
                                  "root": "MuiOutlinedInput-root",
                                }
                              }
                              fullWidth={true}
                              inputProps={
                                Object {
                                  "data-testid": "description-field",
                                }
                              }
                              label={
                                <React.Fragment>
                                  courses:editor.descriptionLabel
                                </React.Fragment>
                              }
                              multiline={true}
                              name="description"
                              onChange={[Function]}
                              rows={4}
                              value=""
                            >
                              <WithStyles(ForwardRef(InputBase))
                                autoFocus={false}
                                classes={
                                  Object {
                                    "adornedEnd": "MuiOutlinedInput-adornedEnd",
                                    "adornedStart": "MuiOutlinedInput-adornedStart",
                                    "colorSecondary": "MuiOutlinedInput-colorSecondary",
                                    "disabled": "Mui-disabled",
                                    "error": "Mui-error",
                                    "focused": "Mui-focused",
                                    "input": "MuiOutlinedInput-input",
                                    "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                                    "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                                    "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                                    "inputMultiline": "MuiOutlinedInput-inputMultiline",
                                    "marginDense": "MuiOutlinedInput-marginDense",
                                    "multiline": "MuiOutlinedInput-multiline",
                                    "notchedOutline": null,
                                    "root": "MuiOutlinedInput-root",
                                  }
                                }
                                fullWidth={true}
                                inputComponent="input"
                                inputProps={
                                  Object {
                                    "data-testid": "description-field",
                                  }
                                }
                                multiline={true}
                                name="description"
                                onChange={[Function]}
                                renderSuffix={[Function]}
                                rows={4}
                                type="text"
                                value=""
                              >
                                <ForwardRef(InputBase)
                                  autoFocus={false}
                                  classes={
                                    Object {
                                      "adornedEnd": "MuiInputBase-adornedEnd MuiOutlinedInput-adornedEnd",
                                      "adornedStart": "MuiInputBase-adornedStart MuiOutlinedInput-adornedStart",
                                      "colorSecondary": "MuiInputBase-colorSecondary MuiOutlinedInput-colorSecondary",
                                      "disabled": "Mui-disabled Mui-disabled",
                                      "error": "Mui-error Mui-error",
                                      "focused": "Mui-focused Mui-focused",
                                      "formControl": "MuiInputBase-formControl",
                                      "fullWidth": "MuiInputBase-fullWidth",
                                      "input": "MuiInputBase-input MuiOutlinedInput-input",
                                      "inputAdornedEnd": "MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd",
                                      "inputAdornedStart": "MuiInputBase-inputAdornedStart MuiOutlinedInput-inputAdornedStart",
                                      "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                      "inputMarginDense": "MuiInputBase-inputMarginDense MuiOutlinedInput-inputMarginDense",
                                      "inputMultiline": "MuiInputBase-inputMultiline MuiOutlinedInput-inputMultiline",
                                      "inputTypeSearch": "MuiInputBase-inputTypeSearch",
                                      "marginDense": "MuiInputBase-marginDense MuiOutlinedInput-marginDense",
                                      "multiline": "MuiInputBase-multiline MuiOutlinedInput-multiline",
                                      "root": "MuiInputBase-root MuiOutlinedInput-root",
                                    }
                                  }
                                  fullWidth={true}
                                  inputComponent="input"
                                  inputProps={
                                    Object {
                                      "data-testid": "description-field",
                                    }
                                  }
                                  multiline={true}
                                  name="description"
                                  onChange={[Function]}
                                  renderSuffix={[Function]}
                                  rows={4}
                                  type="text"
                                  value=""
                                >
                                  <div
                                    className="MuiInputBase-root MuiOutlinedInput-root MuiInputBase-fullWidth MuiInputBase-formControl MuiInputBase-multiline MuiOutlinedInput-multiline"
                                    onClick={[Function]}
                                  >
                                    <textarea
                                      aria-invalid={false}
                                      autoFocus={false}
                                      className="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputMultiline MuiOutlinedInput-inputMultiline"
                                      data-testid="description-field"
                                      disabled={false}
                                      name="description"
                                      onAnimationStart={[Function]}
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      onFocus={[Function]}
                                      required={false}
                                      rows={4}
                                      value=""
                                    />
                                    <WithStyles(ForwardRef(NotchedOutline))
                                      className="MuiOutlinedInput-notchedOutline"
                                      label={
                                        <React.Fragment>
                                          courses:editor.descriptionLabel
                                        </React.Fragment>
                                      }
                                      labelWidth={0}
                                      notched={false}
                                    >
                                      <ForwardRef(NotchedOutline)
                                        className="MuiOutlinedInput-notchedOutline"
                                        classes={
                                          Object {
                                            "legend": "PrivateNotchedOutline-legend-2",
                                            "legendLabelled": "PrivateNotchedOutline-legendLabelled-3",
                                            "legendNotched": "PrivateNotchedOutline-legendNotched-4",
                                            "root": "PrivateNotchedOutline-root-1",
                                          }
                                        }
                                        label={
                                          <React.Fragment>
                                            courses:editor.descriptionLabel
                                          </React.Fragment>
                                        }
                                        labelWidth={0}
                                        notched={false}
                                      >
                                        <fieldset
                                          aria-hidden={true}
                                          className="PrivateNotchedOutline-root-1 MuiOutlinedInput-notchedOutline"
                                        >
                                          <legend
                                            className="PrivateNotchedOutline-legendLabelled-3"
                                          >
                                            <span>
                                              courses:editor.descriptionLabel
                                            </span>
                                          </legend>
                                        </fieldset>
                                      </ForwardRef(NotchedOutline)>
                                    </WithStyles(ForwardRef(NotchedOutline))>
                                  </div>
                                </ForwardRef(InputBase)>
                              </WithStyles(ForwardRef(InputBase))>
                            </ForwardRef(OutlinedInput)>
                          </WithStyles(ForwardRef(OutlinedInput))>
                          <WithStyles(ForwardRef(FormHelperText))>
                            <ForwardRef(FormHelperText)
                              classes={
                                Object {
                                  "contained": "MuiFormHelperText-contained",
                                  "disabled": "Mui-disabled",
                                  "error": "Mui-error",
                                  "filled": "MuiFormHelperText-filled",
                                  "focused": "Mui-focused",
                                  "marginDense": "MuiFormHelperText-marginDense",
                                  "required": "Mui-required",
                                  "root": "MuiFormHelperText-root",
                                }
                              }
                            >
                              <p
                                className="MuiFormHelperText-root MuiFormHelperText-contained"
                              >
                                courses:editor.descriptionHelperText
                              </p>
                            </ForwardRef(FormHelperText)>
                          </WithStyles(ForwardRef(FormHelperText))>
                        </div>
                      </ForwardRef(FormControl)>
                    </WithStyles(ForwardRef(FormControl))>
                  </ForwardRef(TextField)>
                </WithStyles(ForwardRef(TextField))>
              </div>
              <WithStyles(ForwardRef(Button))
                className="addButton"
                color="primary"
                data-testid="course-submit"
                fullWidth={true}
                onClick={[Function]}
                type="submit"
                variant="contained"
              >
                <ForwardRef(Button)
                  className="addButton"
                  classes={
                    Object {
                      "colorInherit": "MuiButton-colorInherit",
                      "contained": "MuiButton-contained",
                      "containedPrimary": "MuiButton-containedPrimary",
                      "containedSecondary": "MuiButton-containedSecondary",
                      "containedSizeLarge": "MuiButton-containedSizeLarge",
                      "containedSizeSmall": "MuiButton-containedSizeSmall",
                      "disableElevation": "MuiButton-disableElevation",
                      "disabled": "Mui-disabled",
                      "endIcon": "MuiButton-endIcon",
                      "focusVisible": "Mui-focusVisible",
                      "fullWidth": "MuiButton-fullWidth",
                      "iconSizeLarge": "MuiButton-iconSizeLarge",
                      "iconSizeMedium": "MuiButton-iconSizeMedium",
                      "iconSizeSmall": "MuiButton-iconSizeSmall",
                      "label": "MuiButton-label",
                      "outlined": "MuiButton-outlined",
                      "outlinedPrimary": "MuiButton-outlinedPrimary",
                      "outlinedSecondary": "MuiButton-outlinedSecondary",
                      "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                      "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                      "root": "MuiButton-root",
                      "sizeLarge": "MuiButton-sizeLarge",
                      "sizeSmall": "MuiButton-sizeSmall",
                      "startIcon": "MuiButton-startIcon",
                      "text": "MuiButton-text",
                      "textPrimary": "MuiButton-textPrimary",
                      "textSecondary": "MuiButton-textSecondary",
                      "textSizeLarge": "MuiButton-textSizeLarge",
                      "textSizeSmall": "MuiButton-textSizeSmall",
                    }
                  }
                  color="primary"
                  data-testid="course-submit"
                  fullWidth={true}
                  onClick={[Function]}
                  type="submit"
                  variant="contained"
                >
                  <WithStyles(ForwardRef(ButtonBase))
                    className="MuiButton-root MuiButton-contained addButton MuiButton-containedPrimary MuiButton-fullWidth"
                    component="button"
                    data-testid="course-submit"
                    disabled={false}
                    focusRipple={true}
                    focusVisibleClassName="Mui-focusVisible"
                    onClick={[Function]}
                    type="submit"
                  >
                    <ForwardRef(ButtonBase)
                      className="MuiButton-root MuiButton-contained addButton MuiButton-containedPrimary MuiButton-fullWidth"
                      classes={
                        Object {
                          "disabled": "Mui-disabled",
                          "focusVisible": "Mui-focusVisible",
                          "root": "MuiButtonBase-root",
                        }
                      }
                      component="button"
                      data-testid="course-submit"
                      disabled={false}
                      focusRipple={true}
                      focusVisibleClassName="Mui-focusVisible"
                      onClick={[Function]}
                      type="submit"
                    >
                      <button
                        className="MuiButtonBase-root MuiButton-root MuiButton-contained addButton MuiButton-containedPrimary MuiButton-fullWidth"
                        data-testid="course-submit"
                        disabled={false}
                        onBlur={[Function]}
                        onClick={[Function]}
                        onDragLeave={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        onMouseDown={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                        onTouchEnd={[Function]}
                        onTouchMove={[Function]}
                        onTouchStart={[Function]}
                        tabIndex={0}
                        type="submit"
                      >
                        <span
                          className="MuiButton-label"
                        >
                          courses:submitButtonLabel
                        </span>
                        <WithStyles(memo)
                          center={false}
                        >
                          <ForwardRef(TouchRipple)
                            center={false}
                            classes={
                              Object {
                                "child": "MuiTouchRipple-child",
                                "childLeaving": "MuiTouchRipple-childLeaving",
                                "childPulsate": "MuiTouchRipple-childPulsate",
                                "ripple": "MuiTouchRipple-ripple",
                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                "root": "MuiTouchRipple-root",
                              }
                            }
                          >
                            <span
                              className="MuiTouchRipple-root"
                            >
                              <TransitionGroup
                                childFactory={[Function]}
                                component={null}
                                exit={true}
                              />
                            </span>
                          </ForwardRef(TouchRipple)>
                        </WithStyles(memo)>
                      </button>
                    </ForwardRef(ButtonBase)>
                  </WithStyles(ForwardRef(ButtonBase))>
                </ForwardRef(Button)>
              </WithStyles(ForwardRef(Button))>
            </div>
          </CourseEditorForm>
          <div
            className="platformContainer"
          >
            <div
              className="sectionTitle"
            >
              courses:whereTitle
            </div>
            <ContactEditor
              setSelectedPlatform={[Function]}
            >
              <div
                className="chipContainer"
              >
                <PlatformBadge
                  isActive={false}
                  label="Zoom"
                  onClick={[Function]}
                >
                  <div>
                    <WithStyles(ForwardRef(Chip))
                      avatar={
                        <WithStyles(ForwardRef(Avatar))>
                          Z
                        </WithStyles(ForwardRef(Avatar))>
                      }
                      className="chip"
                      color="default"
                      deleteIcon={<React.Fragment />}
                      label="Zoom"
                      onClick={[Function]}
                      onDelete={[Function]}
                    >
                      <ForwardRef(Chip)
                        avatar={
                          <WithStyles(ForwardRef(Avatar))>
                            Z
                          </WithStyles(ForwardRef(Avatar))>
                        }
                        className="chip"
                        classes={
                          Object {
                            "avatar": "MuiChip-avatar",
                            "avatarColorPrimary": "MuiChip-avatarColorPrimary",
                            "avatarColorSecondary": "MuiChip-avatarColorSecondary",
                            "avatarSmall": "MuiChip-avatarSmall",
                            "clickable": "MuiChip-clickable",
                            "clickableColorPrimary": "MuiChip-clickableColorPrimary",
                            "clickableColorSecondary": "MuiChip-clickableColorSecondary",
                            "colorPrimary": "MuiChip-colorPrimary",
                            "colorSecondary": "MuiChip-colorSecondary",
                            "deletable": "MuiChip-deletable",
                            "deletableColorPrimary": "MuiChip-deletableColorPrimary",
                            "deletableColorSecondary": "MuiChip-deletableColorSecondary",
                            "deleteIcon": "MuiChip-deleteIcon",
                            "deleteIconColorPrimary": "MuiChip-deleteIconColorPrimary",
                            "deleteIconColorSecondary": "MuiChip-deleteIconColorSecondary",
                            "deleteIconOutlinedColorPrimary": "MuiChip-deleteIconOutlinedColorPrimary",
                            "deleteIconOutlinedColorSecondary": "MuiChip-deleteIconOutlinedColorSecondary",
                            "deleteIconSmall": "MuiChip-deleteIconSmall",
                            "disabled": "Mui-disabled",
                            "icon": "MuiChip-icon",
                            "iconColorPrimary": "MuiChip-iconColorPrimary",
                            "iconColorSecondary": "MuiChip-iconColorSecondary",
                            "iconSmall": "MuiChip-iconSmall",
                            "label": "MuiChip-label",
                            "labelSmall": "MuiChip-labelSmall",
                            "outlined": "MuiChip-outlined",
                            "outlinedPrimary": "MuiChip-outlinedPrimary",
                            "outlinedSecondary": "MuiChip-outlinedSecondary",
                            "root": "MuiChip-root",
                            "sizeSmall": "MuiChip-sizeSmall",
                          }
                        }
                        color="default"
                        deleteIcon={<React.Fragment />}
                        label="Zoom"
                        onClick={[Function]}
                        onDelete={[Function]}
                      >
                        <WithStyles(ForwardRef(ButtonBase))
                          className="MuiChip-root chip MuiChip-clickable MuiChip-deletable"
                          component="div"
                          onClick={[Function]}
                          onKeyDown={[Function]}
                          onKeyUp={[Function]}
                          role="button"
                          tabIndex={0}
                        >
                          <ForwardRef(ButtonBase)
                            className="MuiChip-root chip MuiChip-clickable MuiChip-deletable"
                            classes={
                              Object {
                                "disabled": "Mui-disabled",
                                "focusVisible": "Mui-focusVisible",
                                "root": "MuiButtonBase-root",
                              }
                            }
                            component="div"
                            onClick={[Function]}
                            onKeyDown={[Function]}
                            onKeyUp={[Function]}
                            role="button"
                            tabIndex={0}
                          >
                            <div
                              className="MuiButtonBase-root MuiChip-root chip MuiChip-clickable MuiChip-deletable"
                              onBlur={[Function]}
                              onClick={[Function]}
                              onDragLeave={[Function]}
                              onFocus={[Function]}
                              onKeyDown={[Function]}
                              onKeyUp={[Function]}
                              onMouseDown={[Function]}
                              onMouseLeave={[Function]}
                              onMouseUp={[Function]}
                              onTouchEnd={[Function]}
                              onTouchMove={[Function]}
                              onTouchStart={[Function]}
                              role="button"
                              tabIndex={0}
                            >
                              <WithStyles(ForwardRef(Avatar))
                                className="MuiChip-avatar"
                              >
                                <ForwardRef(Avatar)
                                  className="MuiChip-avatar"
                                  classes={
                                    Object {
                                      "circle": "MuiAvatar-circle",
                                      "colorDefault": "MuiAvatar-colorDefault",
                                      "fallback": "MuiAvatar-fallback",
                                      "img": "MuiAvatar-img",
                                      "root": "MuiAvatar-root",
                                      "rounded": "MuiAvatar-rounded",
                                      "square": "MuiAvatar-square",
                                    }
                                  }
                                >
                                  <div
                                    className="MuiAvatar-root MuiAvatar-circle MuiChip-avatar MuiAvatar-colorDefault"
                                  >
                                    Z
                                  </div>
                                </ForwardRef(Avatar)>
                              </WithStyles(ForwardRef(Avatar))>
                              <span
                                className="MuiChip-label"
                              >
                                Zoom
                              </span>
                              <WithStyles(memo)
                                center={false}
                              >
                                <ForwardRef(TouchRipple)
                                  center={false}
                                  classes={
                                    Object {
                                      "child": "MuiTouchRipple-child",
                                      "childLeaving": "MuiTouchRipple-childLeaving",
                                      "childPulsate": "MuiTouchRipple-childPulsate",
                                      "ripple": "MuiTouchRipple-ripple",
                                      "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                      "rippleVisible": "MuiTouchRipple-rippleVisible",
                                      "root": "MuiTouchRipple-root",
                                    }
                                  }
                                >
                                  <span
                                    className="MuiTouchRipple-root"
                                  >
                                    <TransitionGroup
                                      childFactory={[Function]}
                                      component={null}
                                      exit={true}
                                    />
                                  </span>
                                </ForwardRef(TouchRipple)>
                              </WithStyles(memo)>
                            </div>
                          </ForwardRef(ButtonBase)>
                        </WithStyles(ForwardRef(ButtonBase))>
                      </ForwardRef(Chip)>
                    </WithStyles(ForwardRef(Chip))>
                  </div>
                </PlatformBadge>
                <PlatformBadge
                  isActive={false}
                  label="Teams"
                  onClick={[Function]}
                >
                  <div>
                    <WithStyles(ForwardRef(Chip))
                      avatar={
                        <WithStyles(ForwardRef(Avatar))>
                          T
                        </WithStyles(ForwardRef(Avatar))>
                      }
                      className="chip"
                      color="default"
                      deleteIcon={<React.Fragment />}
                      label="Teams"
                      onClick={[Function]}
                      onDelete={[Function]}
                    >
                      <ForwardRef(Chip)
                        avatar={
                          <WithStyles(ForwardRef(Avatar))>
                            T
                          </WithStyles(ForwardRef(Avatar))>
                        }
                        className="chip"
                        classes={
                          Object {
                            "avatar": "MuiChip-avatar",
                            "avatarColorPrimary": "MuiChip-avatarColorPrimary",
                            "avatarColorSecondary": "MuiChip-avatarColorSecondary",
                            "avatarSmall": "MuiChip-avatarSmall",
                            "clickable": "MuiChip-clickable",
                            "clickableColorPrimary": "MuiChip-clickableColorPrimary",
                            "clickableColorSecondary": "MuiChip-clickableColorSecondary",
                            "colorPrimary": "MuiChip-colorPrimary",
                            "colorSecondary": "MuiChip-colorSecondary",
                            "deletable": "MuiChip-deletable",
                            "deletableColorPrimary": "MuiChip-deletableColorPrimary",
                            "deletableColorSecondary": "MuiChip-deletableColorSecondary",
                            "deleteIcon": "MuiChip-deleteIcon",
                            "deleteIconColorPrimary": "MuiChip-deleteIconColorPrimary",
                            "deleteIconColorSecondary": "MuiChip-deleteIconColorSecondary",
                            "deleteIconOutlinedColorPrimary": "MuiChip-deleteIconOutlinedColorPrimary",
                            "deleteIconOutlinedColorSecondary": "MuiChip-deleteIconOutlinedColorSecondary",
                            "deleteIconSmall": "MuiChip-deleteIconSmall",
                            "disabled": "Mui-disabled",
                            "icon": "MuiChip-icon",
                            "iconColorPrimary": "MuiChip-iconColorPrimary",
                            "iconColorSecondary": "MuiChip-iconColorSecondary",
                            "iconSmall": "MuiChip-iconSmall",
                            "label": "MuiChip-label",
                            "labelSmall": "MuiChip-labelSmall",
                            "outlined": "MuiChip-outlined",
                            "outlinedPrimary": "MuiChip-outlinedPrimary",
                            "outlinedSecondary": "MuiChip-outlinedSecondary",
                            "root": "MuiChip-root",
                            "sizeSmall": "MuiChip-sizeSmall",
                          }
                        }
                        color="default"
                        deleteIcon={<React.Fragment />}
                        label="Teams"
                        onClick={[Function]}
                        onDelete={[Function]}
                      >
                        <WithStyles(ForwardRef(ButtonBase))
                          className="MuiChip-root chip MuiChip-clickable MuiChip-deletable"
                          component="div"
                          onClick={[Function]}
                          onKeyDown={[Function]}
                          onKeyUp={[Function]}
                          role="button"
                          tabIndex={0}
                        >
                          <ForwardRef(ButtonBase)
                            className="MuiChip-root chip MuiChip-clickable MuiChip-deletable"
                            classes={
                              Object {
                                "disabled": "Mui-disabled",
                                "focusVisible": "Mui-focusVisible",
                                "root": "MuiButtonBase-root",
                              }
                            }
                            component="div"
                            onClick={[Function]}
                            onKeyDown={[Function]}
                            onKeyUp={[Function]}
                            role="button"
                            tabIndex={0}
                          >
                            <div
                              className="MuiButtonBase-root MuiChip-root chip MuiChip-clickable MuiChip-deletable"
                              onBlur={[Function]}
                              onClick={[Function]}
                              onDragLeave={[Function]}
                              onFocus={[Function]}
                              onKeyDown={[Function]}
                              onKeyUp={[Function]}
                              onMouseDown={[Function]}
                              onMouseLeave={[Function]}
                              onMouseUp={[Function]}
                              onTouchEnd={[Function]}
                              onTouchMove={[Function]}
                              onTouchStart={[Function]}
                              role="button"
                              tabIndex={0}
                            >
                              <WithStyles(ForwardRef(Avatar))
                                className="MuiChip-avatar"
                              >
                                <ForwardRef(Avatar)
                                  className="MuiChip-avatar"
                                  classes={
                                    Object {
                                      "circle": "MuiAvatar-circle",
                                      "colorDefault": "MuiAvatar-colorDefault",
                                      "fallback": "MuiAvatar-fallback",
                                      "img": "MuiAvatar-img",
                                      "root": "MuiAvatar-root",
                                      "rounded": "MuiAvatar-rounded",
                                      "square": "MuiAvatar-square",
                                    }
                                  }
                                >
                                  <div
                                    className="MuiAvatar-root MuiAvatar-circle MuiChip-avatar MuiAvatar-colorDefault"
                                  >
                                    T
                                  </div>
                                </ForwardRef(Avatar)>
                              </WithStyles(ForwardRef(Avatar))>
                              <span
                                className="MuiChip-label"
                              >
                                Teams
                              </span>
                              <WithStyles(memo)
                                center={false}
                              >
                                <ForwardRef(TouchRipple)
                                  center={false}
                                  classes={
                                    Object {
                                      "child": "MuiTouchRipple-child",
                                      "childLeaving": "MuiTouchRipple-childLeaving",
                                      "childPulsate": "MuiTouchRipple-childPulsate",
                                      "ripple": "MuiTouchRipple-ripple",
                                      "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                      "rippleVisible": "MuiTouchRipple-rippleVisible",
                                      "root": "MuiTouchRipple-root",
                                    }
                                  }
                                >
                                  <span
                                    className="MuiTouchRipple-root"
                                  >
                                    <TransitionGroup
                                      childFactory={[Function]}
                                      component={null}
                                      exit={true}
                                    />
                                  </span>
                                </ForwardRef(TouchRipple)>
                              </WithStyles(memo)>
                            </div>
                          </ForwardRef(ButtonBase)>
                        </WithStyles(ForwardRef(ButtonBase))>
                      </ForwardRef(Chip)>
                    </WithStyles(ForwardRef(Chip))>
                  </div>
                </PlatformBadge>
                <PlatformBadge
                  isActive={false}
                  label="Skype"
                  onClick={[Function]}
                >
                  <div>
                    <WithStyles(ForwardRef(Chip))
                      avatar={
                        <WithStyles(ForwardRef(Avatar))>
                          S
                        </WithStyles(ForwardRef(Avatar))>
                      }
                      className="chip"
                      color="default"
                      deleteIcon={<React.Fragment />}
                      label="Skype"
                      onClick={[Function]}
                      onDelete={[Function]}
                    >
                      <ForwardRef(Chip)
                        avatar={
                          <WithStyles(ForwardRef(Avatar))>
                            S
                          </WithStyles(ForwardRef(Avatar))>
                        }
                        className="chip"
                        classes={
                          Object {
                            "avatar": "MuiChip-avatar",
                            "avatarColorPrimary": "MuiChip-avatarColorPrimary",
                            "avatarColorSecondary": "MuiChip-avatarColorSecondary",
                            "avatarSmall": "MuiChip-avatarSmall",
                            "clickable": "MuiChip-clickable",
                            "clickableColorPrimary": "MuiChip-clickableColorPrimary",
                            "clickableColorSecondary": "MuiChip-clickableColorSecondary",
                            "colorPrimary": "MuiChip-colorPrimary",
                            "colorSecondary": "MuiChip-colorSecondary",
                            "deletable": "MuiChip-deletable",
                            "deletableColorPrimary": "MuiChip-deletableColorPrimary",
                            "deletableColorSecondary": "MuiChip-deletableColorSecondary",
                            "deleteIcon": "MuiChip-deleteIcon",
                            "deleteIconColorPrimary": "MuiChip-deleteIconColorPrimary",
                            "deleteIconColorSecondary": "MuiChip-deleteIconColorSecondary",
                            "deleteIconOutlinedColorPrimary": "MuiChip-deleteIconOutlinedColorPrimary",
                            "deleteIconOutlinedColorSecondary": "MuiChip-deleteIconOutlinedColorSecondary",
                            "deleteIconSmall": "MuiChip-deleteIconSmall",
                            "disabled": "Mui-disabled",
                            "icon": "MuiChip-icon",
                            "iconColorPrimary": "MuiChip-iconColorPrimary",
                            "iconColorSecondary": "MuiChip-iconColorSecondary",
                            "iconSmall": "MuiChip-iconSmall",
                            "label": "MuiChip-label",
                            "labelSmall": "MuiChip-labelSmall",
                            "outlined": "MuiChip-outlined",
                            "outlinedPrimary": "MuiChip-outlinedPrimary",
                            "outlinedSecondary": "MuiChip-outlinedSecondary",
                            "root": "MuiChip-root",
                            "sizeSmall": "MuiChip-sizeSmall",
                          }
                        }
                        color="default"
                        deleteIcon={<React.Fragment />}
                        label="Skype"
                        onClick={[Function]}
                        onDelete={[Function]}
                      >
                        <WithStyles(ForwardRef(ButtonBase))
                          className="MuiChip-root chip MuiChip-clickable MuiChip-deletable"
                          component="div"
                          onClick={[Function]}
                          onKeyDown={[Function]}
                          onKeyUp={[Function]}
                          role="button"
                          tabIndex={0}
                        >
                          <ForwardRef(ButtonBase)
                            className="MuiChip-root chip MuiChip-clickable MuiChip-deletable"
                            classes={
                              Object {
                                "disabled": "Mui-disabled",
                                "focusVisible": "Mui-focusVisible",
                                "root": "MuiButtonBase-root",
                              }
                            }
                            component="div"
                            onClick={[Function]}
                            onKeyDown={[Function]}
                            onKeyUp={[Function]}
                            role="button"
                            tabIndex={0}
                          >
                            <div
                              className="MuiButtonBase-root MuiChip-root chip MuiChip-clickable MuiChip-deletable"
                              onBlur={[Function]}
                              onClick={[Function]}
                              onDragLeave={[Function]}
                              onFocus={[Function]}
                              onKeyDown={[Function]}
                              onKeyUp={[Function]}
                              onMouseDown={[Function]}
                              onMouseLeave={[Function]}
                              onMouseUp={[Function]}
                              onTouchEnd={[Function]}
                              onTouchMove={[Function]}
                              onTouchStart={[Function]}
                              role="button"
                              tabIndex={0}
                            >
                              <WithStyles(ForwardRef(Avatar))
                                className="MuiChip-avatar"
                              >
                                <ForwardRef(Avatar)
                                  className="MuiChip-avatar"
                                  classes={
                                    Object {
                                      "circle": "MuiAvatar-circle",
                                      "colorDefault": "MuiAvatar-colorDefault",
                                      "fallback": "MuiAvatar-fallback",
                                      "img": "MuiAvatar-img",
                                      "root": "MuiAvatar-root",
                                      "rounded": "MuiAvatar-rounded",
                                      "square": "MuiAvatar-square",
                                    }
                                  }
                                >
                                  <div
                                    className="MuiAvatar-root MuiAvatar-circle MuiChip-avatar MuiAvatar-colorDefault"
                                  >
                                    S
                                  </div>
                                </ForwardRef(Avatar)>
                              </WithStyles(ForwardRef(Avatar))>
                              <span
                                className="MuiChip-label"
                              >
                                Skype
                              </span>
                              <WithStyles(memo)
                                center={false}
                              >
                                <ForwardRef(TouchRipple)
                                  center={false}
                                  classes={
                                    Object {
                                      "child": "MuiTouchRipple-child",
                                      "childLeaving": "MuiTouchRipple-childLeaving",
                                      "childPulsate": "MuiTouchRipple-childPulsate",
                                      "ripple": "MuiTouchRipple-ripple",
                                      "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                      "rippleVisible": "MuiTouchRipple-rippleVisible",
                                      "root": "MuiTouchRipple-root",
                                    }
                                  }
                                >
                                  <span
                                    className="MuiTouchRipple-root"
                                  >
                                    <TransitionGroup
                                      childFactory={[Function]}
                                      component={null}
                                      exit={true}
                                    />
                                  </span>
                                </ForwardRef(TouchRipple)>
                              </WithStyles(memo)>
                            </div>
                          </ForwardRef(ButtonBase)>
                        </WithStyles(ForwardRef(ButtonBase))>
                      </ForwardRef(Chip)>
                    </WithStyles(ForwardRef(Chip))>
                  </div>
                </PlatformBadge>
                <PlatformBadge
                  isActive={false}
                  label="Discord"
                  onClick={[Function]}
                >
                  <div>
                    <WithStyles(ForwardRef(Chip))
                      avatar={
                        <WithStyles(ForwardRef(Avatar))>
                          D
                        </WithStyles(ForwardRef(Avatar))>
                      }
                      className="chip"
                      color="default"
                      deleteIcon={<React.Fragment />}
                      label="Discord"
                      onClick={[Function]}
                      onDelete={[Function]}
                    >
                      <ForwardRef(Chip)
                        avatar={
                          <WithStyles(ForwardRef(Avatar))>
                            D
                          </WithStyles(ForwardRef(Avatar))>
                        }
                        className="chip"
                        classes={
                          Object {
                            "avatar": "MuiChip-avatar",
                            "avatarColorPrimary": "MuiChip-avatarColorPrimary",
                            "avatarColorSecondary": "MuiChip-avatarColorSecondary",
                            "avatarSmall": "MuiChip-avatarSmall",
                            "clickable": "MuiChip-clickable",
                            "clickableColorPrimary": "MuiChip-clickableColorPrimary",
                            "clickableColorSecondary": "MuiChip-clickableColorSecondary",
                            "colorPrimary": "MuiChip-colorPrimary",
                            "colorSecondary": "MuiChip-colorSecondary",
                            "deletable": "MuiChip-deletable",
                            "deletableColorPrimary": "MuiChip-deletableColorPrimary",
                            "deletableColorSecondary": "MuiChip-deletableColorSecondary",
                            "deleteIcon": "MuiChip-deleteIcon",
                            "deleteIconColorPrimary": "MuiChip-deleteIconColorPrimary",
                            "deleteIconColorSecondary": "MuiChip-deleteIconColorSecondary",
                            "deleteIconOutlinedColorPrimary": "MuiChip-deleteIconOutlinedColorPrimary",
                            "deleteIconOutlinedColorSecondary": "MuiChip-deleteIconOutlinedColorSecondary",
                            "deleteIconSmall": "MuiChip-deleteIconSmall",
                            "disabled": "Mui-disabled",
                            "icon": "MuiChip-icon",
                            "iconColorPrimary": "MuiChip-iconColorPrimary",
                            "iconColorSecondary": "MuiChip-iconColorSecondary",
                            "iconSmall": "MuiChip-iconSmall",
                            "label": "MuiChip-label",
                            "labelSmall": "MuiChip-labelSmall",
                            "outlined": "MuiChip-outlined",
                            "outlinedPrimary": "MuiChip-outlinedPrimary",
                            "outlinedSecondary": "MuiChip-outlinedSecondary",
                            "root": "MuiChip-root",
                            "sizeSmall": "MuiChip-sizeSmall",
                          }
                        }
                        color="default"
                        deleteIcon={<React.Fragment />}
                        label="Discord"
                        onClick={[Function]}
                        onDelete={[Function]}
                      >
                        <WithStyles(ForwardRef(ButtonBase))
                          className="MuiChip-root chip MuiChip-clickable MuiChip-deletable"
                          component="div"
                          onClick={[Function]}
                          onKeyDown={[Function]}
                          onKeyUp={[Function]}
                          role="button"
                          tabIndex={0}
                        >
                          <ForwardRef(ButtonBase)
                            className="MuiChip-root chip MuiChip-clickable MuiChip-deletable"
                            classes={
                              Object {
                                "disabled": "Mui-disabled",
                                "focusVisible": "Mui-focusVisible",
                                "root": "MuiButtonBase-root",
                              }
                            }
                            component="div"
                            onClick={[Function]}
                            onKeyDown={[Function]}
                            onKeyUp={[Function]}
                            role="button"
                            tabIndex={0}
                          >
                            <div
                              className="MuiButtonBase-root MuiChip-root chip MuiChip-clickable MuiChip-deletable"
                              onBlur={[Function]}
                              onClick={[Function]}
                              onDragLeave={[Function]}
                              onFocus={[Function]}
                              onKeyDown={[Function]}
                              onKeyUp={[Function]}
                              onMouseDown={[Function]}
                              onMouseLeave={[Function]}
                              onMouseUp={[Function]}
                              onTouchEnd={[Function]}
                              onTouchMove={[Function]}
                              onTouchStart={[Function]}
                              role="button"
                              tabIndex={0}
                            >
                              <WithStyles(ForwardRef(Avatar))
                                className="MuiChip-avatar"
                              >
                                <ForwardRef(Avatar)
                                  className="MuiChip-avatar"
                                  classes={
                                    Object {
                                      "circle": "MuiAvatar-circle",
                                      "colorDefault": "MuiAvatar-colorDefault",
                                      "fallback": "MuiAvatar-fallback",
                                      "img": "MuiAvatar-img",
                                      "root": "MuiAvatar-root",
                                      "rounded": "MuiAvatar-rounded",
                                      "square": "MuiAvatar-square",
                                    }
                                  }
                                >
                                  <div
                                    className="MuiAvatar-root MuiAvatar-circle MuiChip-avatar MuiAvatar-colorDefault"
                                  >
                                    D
                                  </div>
                                </ForwardRef(Avatar)>
                              </WithStyles(ForwardRef(Avatar))>
                              <span
                                className="MuiChip-label"
                              >
                                Discord
                              </span>
                              <WithStyles(memo)
                                center={false}
                              >
                                <ForwardRef(TouchRipple)
                                  center={false}
                                  classes={
                                    Object {
                                      "child": "MuiTouchRipple-child",
                                      "childLeaving": "MuiTouchRipple-childLeaving",
                                      "childPulsate": "MuiTouchRipple-childPulsate",
                                      "ripple": "MuiTouchRipple-ripple",
                                      "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                      "rippleVisible": "MuiTouchRipple-rippleVisible",
                                      "root": "MuiTouchRipple-root",
                                    }
                                  }
                                >
                                  <span
                                    className="MuiTouchRipple-root"
                                  >
                                    <TransitionGroup
                                      childFactory={[Function]}
                                      component={null}
                                      exit={true}
                                    />
                                  </span>
                                </ForwardRef(TouchRipple)>
                              </WithStyles(memo)>
                            </div>
                          </ForwardRef(ButtonBase)>
                        </WithStyles(ForwardRef(ButtonBase))>
                      </ForwardRef(Chip)>
                    </WithStyles(ForwardRef(Chip))>
                  </div>
                </PlatformBadge>
                <PlatformBadge
                  isActive={false}
                  label="Other"
                  onClick={[Function]}
                >
                  <div>
                    <WithStyles(ForwardRef(Chip))
                      avatar={
                        <WithStyles(ForwardRef(Avatar))>
                          O
                        </WithStyles(ForwardRef(Avatar))>
                      }
                      className="chip"
                      color="default"
                      deleteIcon={<React.Fragment />}
                      label="Other"
                      onClick={[Function]}
                      onDelete={[Function]}
                    >
                      <ForwardRef(Chip)
                        avatar={
                          <WithStyles(ForwardRef(Avatar))>
                            O
                          </WithStyles(ForwardRef(Avatar))>
                        }
                        className="chip"
                        classes={
                          Object {
                            "avatar": "MuiChip-avatar",
                            "avatarColorPrimary": "MuiChip-avatarColorPrimary",
                            "avatarColorSecondary": "MuiChip-avatarColorSecondary",
                            "avatarSmall": "MuiChip-avatarSmall",
                            "clickable": "MuiChip-clickable",
                            "clickableColorPrimary": "MuiChip-clickableColorPrimary",
                            "clickableColorSecondary": "MuiChip-clickableColorSecondary",
                            "colorPrimary": "MuiChip-colorPrimary",
                            "colorSecondary": "MuiChip-colorSecondary",
                            "deletable": "MuiChip-deletable",
                            "deletableColorPrimary": "MuiChip-deletableColorPrimary",
                            "deletableColorSecondary": "MuiChip-deletableColorSecondary",
                            "deleteIcon": "MuiChip-deleteIcon",
                            "deleteIconColorPrimary": "MuiChip-deleteIconColorPrimary",
                            "deleteIconColorSecondary": "MuiChip-deleteIconColorSecondary",
                            "deleteIconOutlinedColorPrimary": "MuiChip-deleteIconOutlinedColorPrimary",
                            "deleteIconOutlinedColorSecondary": "MuiChip-deleteIconOutlinedColorSecondary",
                            "deleteIconSmall": "MuiChip-deleteIconSmall",
                            "disabled": "Mui-disabled",
                            "icon": "MuiChip-icon",
                            "iconColorPrimary": "MuiChip-iconColorPrimary",
                            "iconColorSecondary": "MuiChip-iconColorSecondary",
                            "iconSmall": "MuiChip-iconSmall",
                            "label": "MuiChip-label",
                            "labelSmall": "MuiChip-labelSmall",
                            "outlined": "MuiChip-outlined",
                            "outlinedPrimary": "MuiChip-outlinedPrimary",
                            "outlinedSecondary": "MuiChip-outlinedSecondary",
                            "root": "MuiChip-root",
                            "sizeSmall": "MuiChip-sizeSmall",
                          }
                        }
                        color="default"
                        deleteIcon={<React.Fragment />}
                        label="Other"
                        onClick={[Function]}
                        onDelete={[Function]}
                      >
                        <WithStyles(ForwardRef(ButtonBase))
                          className="MuiChip-root chip MuiChip-clickable MuiChip-deletable"
                          component="div"
                          onClick={[Function]}
                          onKeyDown={[Function]}
                          onKeyUp={[Function]}
                          role="button"
                          tabIndex={0}
                        >
                          <ForwardRef(ButtonBase)
                            className="MuiChip-root chip MuiChip-clickable MuiChip-deletable"
                            classes={
                              Object {
                                "disabled": "Mui-disabled",
                                "focusVisible": "Mui-focusVisible",
                                "root": "MuiButtonBase-root",
                              }
                            }
                            component="div"
                            onClick={[Function]}
                            onKeyDown={[Function]}
                            onKeyUp={[Function]}
                            role="button"
                            tabIndex={0}
                          >
                            <div
                              className="MuiButtonBase-root MuiChip-root chip MuiChip-clickable MuiChip-deletable"
                              onBlur={[Function]}
                              onClick={[Function]}
                              onDragLeave={[Function]}
                              onFocus={[Function]}
                              onKeyDown={[Function]}
                              onKeyUp={[Function]}
                              onMouseDown={[Function]}
                              onMouseLeave={[Function]}
                              onMouseUp={[Function]}
                              onTouchEnd={[Function]}
                              onTouchMove={[Function]}
                              onTouchStart={[Function]}
                              role="button"
                              tabIndex={0}
                            >
                              <WithStyles(ForwardRef(Avatar))
                                className="MuiChip-avatar"
                              >
                                <ForwardRef(Avatar)
                                  className="MuiChip-avatar"
                                  classes={
                                    Object {
                                      "circle": "MuiAvatar-circle",
                                      "colorDefault": "MuiAvatar-colorDefault",
                                      "fallback": "MuiAvatar-fallback",
                                      "img": "MuiAvatar-img",
                                      "root": "MuiAvatar-root",
                                      "rounded": "MuiAvatar-rounded",
                                      "square": "MuiAvatar-square",
                                    }
                                  }
                                >
                                  <div
                                    className="MuiAvatar-root MuiAvatar-circle MuiChip-avatar MuiAvatar-colorDefault"
                                  >
                                    O
                                  </div>
                                </ForwardRef(Avatar)>
                              </WithStyles(ForwardRef(Avatar))>
                              <span
                                className="MuiChip-label"
                              >
                                Other
                              </span>
                              <WithStyles(memo)
                                center={false}
                              >
                                <ForwardRef(TouchRipple)
                                  center={false}
                                  classes={
                                    Object {
                                      "child": "MuiTouchRipple-child",
                                      "childLeaving": "MuiTouchRipple-childLeaving",
                                      "childPulsate": "MuiTouchRipple-childPulsate",
                                      "ripple": "MuiTouchRipple-ripple",
                                      "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                      "rippleVisible": "MuiTouchRipple-rippleVisible",
                                      "root": "MuiTouchRipple-root",
                                    }
                                  }
                                >
                                  <span
                                    className="MuiTouchRipple-root"
                                  >
                                    <TransitionGroup
                                      childFactory={[Function]}
                                      component={null}
                                      exit={true}
                                    />
                                  </span>
                                </ForwardRef(TouchRipple)>
                              </WithStyles(memo)>
                            </div>
                          </ForwardRef(ButtonBase)>
                        </WithStyles(ForwardRef(ButtonBase))>
                      </ForwardRef(Chip)>
                    </WithStyles(ForwardRef(Chip))>
                  </div>
                </PlatformBadge>
              </div>
            </ContactEditor>
            <FileEditor
              onFileRemove={[Function]}
              onFileSelect={[Function]}
              selectedFiles={Array []}
            >
              <div
                className="attachementsContainer"
              >
                <div
                  className="sectionTitle"
                >
                  courses:attachFilesLabel
                </div>
                <input
                  color="primary"
                  id="icon-button-file"
                  onChange={[Function]}
                  style={
                    Object {
                      "display": "none",
                    }
                  }
                  type="file"
                />
                <label
                  htmlFor="icon-button-file"
                >
                  <WithStyles(ForwardRef(Button))
                    className="addFileButton"
                    color="primary"
                    component="span"
                    size="large"
                    startIcon={<Memo />}
                  >
                    <ForwardRef(Button)
                      className="addFileButton"
                      classes={
                        Object {
                          "colorInherit": "MuiButton-colorInherit",
                          "contained": "MuiButton-contained",
                          "containedPrimary": "MuiButton-containedPrimary",
                          "containedSecondary": "MuiButton-containedSecondary",
                          "containedSizeLarge": "MuiButton-containedSizeLarge",
                          "containedSizeSmall": "MuiButton-containedSizeSmall",
                          "disableElevation": "MuiButton-disableElevation",
                          "disabled": "Mui-disabled",
                          "endIcon": "MuiButton-endIcon",
                          "focusVisible": "Mui-focusVisible",
                          "fullWidth": "MuiButton-fullWidth",
                          "iconSizeLarge": "MuiButton-iconSizeLarge",
                          "iconSizeMedium": "MuiButton-iconSizeMedium",
                          "iconSizeSmall": "MuiButton-iconSizeSmall",
                          "label": "MuiButton-label",
                          "outlined": "MuiButton-outlined",
                          "outlinedPrimary": "MuiButton-outlinedPrimary",
                          "outlinedSecondary": "MuiButton-outlinedSecondary",
                          "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                          "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                          "root": "MuiButton-root",
                          "sizeLarge": "MuiButton-sizeLarge",
                          "sizeSmall": "MuiButton-sizeSmall",
                          "startIcon": "MuiButton-startIcon",
                          "text": "MuiButton-text",
                          "textPrimary": "MuiButton-textPrimary",
                          "textSecondary": "MuiButton-textSecondary",
                          "textSizeLarge": "MuiButton-textSizeLarge",
                          "textSizeSmall": "MuiButton-textSizeSmall",
                        }
                      }
                      color="primary"
                      component="span"
                      size="large"
                      startIcon={<Memo />}
                    >
                      <WithStyles(ForwardRef(ButtonBase))
                        className="MuiButton-root MuiButton-text addFileButton MuiButton-textPrimary MuiButton-textSizeLarge MuiButton-sizeLarge"
                        component="span"
                        disabled={false}
                        focusRipple={true}
                        focusVisibleClassName="Mui-focusVisible"
                        type="button"
                      >
                        <ForwardRef(ButtonBase)
                          className="MuiButton-root MuiButton-text addFileButton MuiButton-textPrimary MuiButton-textSizeLarge MuiButton-sizeLarge"
                          classes={
                            Object {
                              "disabled": "Mui-disabled",
                              "focusVisible": "Mui-focusVisible",
                              "root": "MuiButtonBase-root",
                            }
                          }
                          component="span"
                          disabled={false}
                          focusRipple={true}
                          focusVisibleClassName="Mui-focusVisible"
                          type="button"
                        >
                          <span
                            aria-disabled={false}
                            className="MuiButtonBase-root MuiButton-root MuiButton-text addFileButton MuiButton-textPrimary MuiButton-textSizeLarge MuiButton-sizeLarge"
                            onBlur={[Function]}
                            onDragLeave={[Function]}
                            onFocus={[Function]}
                            onKeyDown={[Function]}
                            onKeyUp={[Function]}
                            onMouseDown={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                            onTouchEnd={[Function]}
                            onTouchMove={[Function]}
                            onTouchStart={[Function]}
                            role="button"
                            tabIndex={0}
                          >
                            <span
                              className="MuiButton-label"
                            >
                              <span
                                className="MuiButton-startIcon MuiButton-iconSizeLarge"
                              >
                                <ForwardRef(AddIcon)>
                                  <WithStyles(ForwardRef(SvgIcon))>
                                    <ForwardRef(SvgIcon)
                                      classes={
                                        Object {
                                          "colorAction": "MuiSvgIcon-colorAction",
                                          "colorDisabled": "MuiSvgIcon-colorDisabled",
                                          "colorError": "MuiSvgIcon-colorError",
                                          "colorPrimary": "MuiSvgIcon-colorPrimary",
                                          "colorSecondary": "MuiSvgIcon-colorSecondary",
                                          "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                          "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                          "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                          "root": "MuiSvgIcon-root",
                                        }
                                      }
                                    >
                                      <svg
                                        aria-hidden={true}
                                        className="MuiSvgIcon-root"
                                        focusable="false"
                                        viewBox="0 0 24 24"
                                      >
                                        <path
                                          d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"
                                        />
                                      </svg>
                                    </ForwardRef(SvgIcon)>
                                  </WithStyles(ForwardRef(SvgIcon))>
                                </ForwardRef(AddIcon)>
                              </span>
                              courses:addFileLabel
                            </span>
                            <WithStyles(memo)
                              center={false}
                            >
                              <ForwardRef(TouchRipple)
                                center={false}
                                classes={
                                  Object {
                                    "child": "MuiTouchRipple-child",
                                    "childLeaving": "MuiTouchRipple-childLeaving",
                                    "childPulsate": "MuiTouchRipple-childPulsate",
                                    "ripple": "MuiTouchRipple-ripple",
                                    "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                    "rippleVisible": "MuiTouchRipple-rippleVisible",
                                    "root": "MuiTouchRipple-root",
                                  }
                                }
                              >
                                <span
                                  className="MuiTouchRipple-root"
                                >
                                  <TransitionGroup
                                    childFactory={[Function]}
                                    component={null}
                                    exit={true}
                                  />
                                </span>
                              </ForwardRef(TouchRipple)>
                            </WithStyles(memo)>
                          </span>
                        </ForwardRef(ButtonBase)>
                      </WithStyles(ForwardRef(ButtonBase))>
                    </ForwardRef(Button)>
                  </WithStyles(ForwardRef(Button))>
                </label>
              </div>
            </FileEditor>
          </div>
        </div>
      </MuiPickersUtilsProvider>
    </CourseEditor>
  </SnackbarProvider>
</i>
`;
